// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rpc_client

import (
	"context"
	"github.com/castbox/go-guru/pkg/client/grpc"
	"github.com/castbox/go-guru/pkg/goguru/conf"
	"github.com/castbox/go-guru/pkg/infra/logger"
	"github.com/castbox/go-guru/pkg/infra/otlp"
)

// Injectors from wire.go:

func wireClient(contextContext context.Context, client *conf.Client, log *conf.Log, confOtlp *conf.Otlp) (*Clients, func(), error) {
	configs, err := grpc.NewConfigsByGuru(client)
	if err != nil {
		return nil, nil, err
	}
	appMetadata := newAppMetadata()
	loggerConfigs := logger.NewConfigsByGuru(appMetadata, log)
	logLogger, err := logger.NewLogger(appMetadata, loggerConfigs)
	if err != nil {
		return nil, nil, err
	}
	otlpConfigs, err := otlp.NewConfigsByGuru(appMetadata, confOtlp)
	if err != nil {
		return nil, nil, err
	}
	helper := logger.NewLoggerHelper(contextContext, logLogger)
	tracerProvider, err := otlp.NewTracerProvider(contextContext, appMetadata, otlpConfigs, helper)
	if err != nil {
		return nil, nil, err
	}
	v, cleanup, err := grpc.NewGrpcConnections(contextContext, configs, logLogger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	clients, err := NewClients(contextContext, v, logLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return clients, func() {
		cleanup()
	}, nil
}
