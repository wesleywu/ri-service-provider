// Code generated by protoc-gen-go-guru. DO NOT EDIT.
// versions:
//  protoc-gen-go-guru v0.2.0
// source: app/videocollection/service/proto/video_collection.proto

package proto

import (
	"context"

	orm "github.com/castbox/go-guru/pkg/goguru/orm"
	"github.com/castbox/go-guru/pkg/goguru/types"
	"github.com/castbox/go-guru/pkg/infra/mongodb"
	"github.com/castbox/go-guru/pkg/infra/mongodb/repo/logic"
	"github.com/go-kratos/kratos/v2/log"
	enum "github.com/wesleywu/ri-service-provider/app/videocollection/service/enum"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

const (
	VideoCollectionCollectionName = "video_collection"
)

var VideoCollectionColumnMap = map[string]string{
	"Id":          "_id",
	"Name":        "name",
	"ContentType": "content_type",
	"FilterType":  "filter_type",
	"Count":       "count",
	"IsOnline":    "is_online",
	"CreatedAt":   "created_at",
	"UpdatedAt":   "updated_at",
}

type VideoCollectionRepo struct {
	collection       *mongo.Collection
	useIdObfuscating bool
	helper           *log.Helper
}

func NewVideoCollectionRepo(mongoClient *mongodb.Client, logHelper *log.Helper) (*VideoCollectionRepo, error) {
	collection := mongoClient.Collection(VideoCollectionCollectionName)
	repo := &VideoCollectionRepo{
		collection:       collection,
		useIdObfuscating: mongoClient.UseIdObfuscating(),
		helper:           logHelper,
	}
	err := repo.createIndexes(context.Background())
	if err != nil {
		return nil, err
	}
	return repo, nil
}

// createIndexes 创建索引
func (r *VideoCollectionRepo) createIndexes(ctx context.Context) error {
	_, err := r.collection.Indexes().CreateMany(ctx, []mongo.IndexModel{
		mongo.IndexModel{
			Keys: bson.D{
				{"$**", 1},
			},
			Options: &options.IndexOptions{
				Unique: types.Wrap(false),
			},
		},
		mongo.IndexModel{
			Keys: bson.D{
				{"$**", "text"},
			},
			Options: &options.IndexOptions{
				Unique: types.Wrap(false),
			},
		},
	})
	if err != nil {
		return err
	}
	return nil
}

// Count 根据req指定的查询条件获取记录列表
// 支持翻页和排序参数，支持查询条件参数类型自动转换
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *VideoCollectionRepo) Count(ctx context.Context, req *VideoCollectionCountReq) (*VideoCollectionCountRes, error) {
	l := logic.NewCountLogic[*VideoCollectionCountReq, *VideoCollectionCountRes](r.collection, VideoCollectionColumnMap, r.helper)
	return l.Count(ctx, req)
}

// List 根据req指定的查询条件获取记录列表
// 支持翻页和排序参数，支持查询条件参数类型自动转换
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *VideoCollectionRepo) List(ctx context.Context, req *VideoCollectionListReq) (*VideoCollectionListRes, error) {
	l := logic.NewListLogic[*VideoCollectionListReq, *VideoCollectionListRes, *VideoCollection](r.collection, VideoCollectionColumnMap, r.helper)
	return l.List(ctx, req)
}

// One 根据req指定的查询条件获取单条数据
// 支持排序参数，支持查询条件参数类型自动转换
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *VideoCollectionRepo) One(ctx context.Context, req *VideoCollectionOneReq) (*VideoCollectionOneRes, error) {
	l := logic.NewOneLogic[*VideoCollectionOneReq, *VideoCollectionOneRes, *VideoCollection](r.collection, VideoCollectionColumnMap, r.helper)
	return l.One(ctx, req)
}

// Get 根据主键/ID查询特定记录
func (r *VideoCollectionRepo) Get(ctx context.Context, req *VideoCollectionGetReq) (*VideoCollectionGetRes, error) {
	l := logic.NewGetLogic[*VideoCollectionGetReq, *VideoCollectionGetRes](r.collection, r.useIdObfuscating, r.helper)
	return l.Get(ctx, req)
}

// Create 插入记录
// 包括表中所有字段，支持字段类型自动转换，支持对非主键且可为空字段不赋值
// 未赋值或赋值为nil的字段将被更新为 NULL 或数据库表指定的DEFAULT
func (r *VideoCollectionRepo) Create(ctx context.Context, req *VideoCollectionCreateReq) (*VideoCollectionCreateRes, error) {
	l := logic.NewCreateLogic[*VideoCollectionCreateReq, *VideoCollectionCreateRes](r.collection, r.useIdObfuscating, r.helper)
	return l.Create(ctx, req)
}

// Update 根据主键更新对应记录
// 支持字段类型自动转换，支持对非主键字段赋值/不赋值
// 未赋值或赋值为nil的字段不参与更新（即不会修改原记录的字段值）
func (r *VideoCollectionRepo) Update(ctx context.Context, req *VideoCollectionUpdateReq) (*VideoCollectionUpdateRes, error) {
	l := logic.NewUpdateLogic[*VideoCollectionUpdateReq, *VideoCollectionUpdateRes](r.collection, r.useIdObfuscating, r.helper)
	return l.Update(ctx, req)
}

// Upsert 根据主键（或唯一索引）是否存在且已在req中赋值，更新或插入对应记录。
// 支持字段类型自动转换，支持对非主键字段赋值/不赋值
// 未赋值或赋值为nil的字段不参与更新/插入（即更新时不会修改原记录的字段值）
func (r *VideoCollectionRepo) Upsert(ctx context.Context, req *VideoCollectionUpsertReq) (*VideoCollectionUpsertRes, error) {
	l := logic.NewUpsertLogic[*VideoCollectionUpsertReq, *VideoCollectionUpsertRes](r.collection, r.useIdObfuscating, r.helper)
	return l.Upsert(ctx, req)
}

// Delete 根据主键删除对应记录
func (r *VideoCollectionRepo) Delete(ctx context.Context, req *VideoCollectionDeleteReq) (*VideoCollectionDeleteRes, error) {
	l := logic.NewDeleteLogic[*VideoCollectionDeleteReq, *VideoCollectionDeleteRes](r.collection, r.useIdObfuscating, r.helper)
	return l.Delete(ctx, req)
}

// DeleteMulti 根据req指定的条件删除表中记录（可能多条）
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *VideoCollectionRepo) DeleteMulti(ctx context.Context, req *VideoCollectionDeleteMultiReq) (*VideoCollectionDeleteMultiRes, error) {
	l := logic.NewDeleteMultiLogic[*VideoCollectionDeleteMultiReq, *VideoCollectionDeleteMultiRes](r.collection, VideoCollectionColumnMap, r.helper)
	return l.DeleteMulti(ctx, req)
}

func (m *VideoCollection) SetId(v *string) {
	m.Id = v
}

func (m *VideoCollection) SetName(v *string) {
	m.Name = v
}

func (m *VideoCollection) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *VideoCollection) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *VideoCollection) SetCount(v *int32) {
	m.Count = v
}

func (m *VideoCollection) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *VideoCollection) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *VideoCollection) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *VideoCollectionCountReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *VideoCollectionCountReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *VideoCollectionCountReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *VideoCollectionCountReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *VideoCollectionCountReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *VideoCollectionCountReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *VideoCollectionCountReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *VideoCollectionCountReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *VideoCollectionCountReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *VideoCollectionCountRes) SetTotalElements(v int64) {
	m.TotalElements = v
}

func (m *VideoCollectionOneReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *VideoCollectionOneReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *VideoCollectionOneReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *VideoCollectionOneReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *VideoCollectionOneReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *VideoCollectionOneReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *VideoCollectionOneReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *VideoCollectionOneReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *VideoCollectionOneReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *VideoCollectionOneReq) SetPageRequest(v *orm.PageRequest) {
	m.PageRequest = v
}

func (m *VideoCollectionOneRes) SetFound(v bool) {
	m.Found = v
}

func (m *VideoCollectionOneRes) SetItem(v *VideoCollection) {
	m.Item = v
}

func (m *VideoCollectionListReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *VideoCollectionListReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *VideoCollectionListReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *VideoCollectionListReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *VideoCollectionListReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *VideoCollectionListReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *VideoCollectionListReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *VideoCollectionListReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *VideoCollectionListReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *VideoCollectionListReq) SetPageRequest(v *orm.PageRequest) {
	m.PageRequest = v
}

func (m *VideoCollectionListRes) SetPageInfo(v *orm.PageInfo) {
	m.PageInfo = v
}

func (m *VideoCollectionListRes) SetItems(v []*VideoCollection) {
	m.Items = v
}

func (m *VideoCollectionGetReq) SetId(v string) {
	m.Id = v
}

func (m *VideoCollectionGetRes) SetId(v *string) {
	m.Id = v
}

func (m *VideoCollectionGetRes) SetName(v *string) {
	m.Name = v
}

func (m *VideoCollectionGetRes) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *VideoCollectionGetRes) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *VideoCollectionGetRes) SetCount(v *int32) {
	m.Count = v
}

func (m *VideoCollectionGetRes) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *VideoCollectionGetRes) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *VideoCollectionGetRes) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *VideoCollectionCreateReq) SetName(v *string) {
	m.Name = v
}

func (m *VideoCollectionCreateReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *VideoCollectionCreateReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *VideoCollectionCreateReq) SetCount(v *int32) {
	m.Count = v
}

func (m *VideoCollectionCreateReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *VideoCollectionCreateReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *VideoCollectionCreateReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *VideoCollectionCreateRes) SetMessage(v string) {
	m.Message = v
}

func (m *VideoCollectionCreateRes) SetInsertedID(v *string) {
	m.InsertedID = v
}

func (m *VideoCollectionCreateRes) SetInsertedCount(v int64) {
	m.InsertedCount = v
}

func (m *VideoCollectionUpdateReq) SetId(v string) {
	m.Id = v
}

func (m *VideoCollectionUpdateReq) SetName(v *string) {
	m.Name = v
}

func (m *VideoCollectionUpdateReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *VideoCollectionUpdateReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *VideoCollectionUpdateReq) SetCount(v *int32) {
	m.Count = v
}

func (m *VideoCollectionUpdateReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *VideoCollectionUpdateReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *VideoCollectionUpdateReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *VideoCollectionUpdateRes) SetMessage(v string) {
	m.Message = v
}

func (m *VideoCollectionUpdateRes) SetMatchedCount(v int64) {
	m.MatchedCount = v
}

func (m *VideoCollectionUpdateRes) SetModifiedCount(v int64) {
	m.ModifiedCount = v
}

func (m *VideoCollectionUpsertReq) SetId(v string) {
	m.Id = v
}

func (m *VideoCollectionUpsertReq) SetName(v *string) {
	m.Name = v
}

func (m *VideoCollectionUpsertReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *VideoCollectionUpsertReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *VideoCollectionUpsertReq) SetCount(v *int32) {
	m.Count = v
}

func (m *VideoCollectionUpsertReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *VideoCollectionUpsertReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *VideoCollectionUpsertReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *VideoCollectionUpsertRes) SetMessage(v string) {
	m.Message = v
}

func (m *VideoCollectionUpsertRes) SetUpsertedID(v *string) {
	m.UpsertedID = v
}

func (m *VideoCollectionUpsertRes) SetMatchedCount(v int64) {
	m.MatchedCount = v
}

func (m *VideoCollectionUpsertRes) SetModifiedCount(v int64) {
	m.ModifiedCount = v
}

func (m *VideoCollectionUpsertRes) SetUpsertedCount(v int64) {
	m.UpsertedCount = v
}

func (m *VideoCollectionDeleteReq) SetId(v string) {
	m.Id = v
}

func (m *VideoCollectionDeleteRes) SetMessage(v string) {
	m.Message = v
}

func (m *VideoCollectionDeleteRes) SetDeletedCount(v int64) {
	m.DeletedCount = v
}

func (m *VideoCollectionDeleteMultiReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *VideoCollectionDeleteMultiReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *VideoCollectionDeleteMultiReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *VideoCollectionDeleteMultiReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *VideoCollectionDeleteMultiReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *VideoCollectionDeleteMultiReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *VideoCollectionDeleteMultiReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *VideoCollectionDeleteMultiReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *VideoCollectionDeleteMultiReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *VideoCollectionDeleteMultiRes) SetMessage(v string) {
	m.Message = v
}

func (m *VideoCollectionDeleteMultiRes) SetDeletedCount(v int64) {
	m.DeletedCount = v
}
