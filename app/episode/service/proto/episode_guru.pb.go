// Code generated by protoc-gen-go-guru. DO NOT EDIT.
// versions:
//  protoc-gen-go-guru v0.2.5
// source: app/episode/service/proto/episode.proto

package proto

import (
	context "context"

	orm "github.com/castbox/go-guru/pkg/goguru/orm"
	mongodb "github.com/castbox/go-guru/pkg/infra/mongodb"
	logic "github.com/castbox/go-guru/pkg/infra/mongodb/repo/logic"
	collection "github.com/castbox/go-guru/pkg/infra/mongodb/repo/meta/collection"
	log "github.com/go-kratos/kratos/v2/log"
	g "github.com/wesleywu/gcontainer/g"
	enum "github.com/wesleywu/ri-service-provider/app/episode/service/enum"
	bson "go.mongodb.org/mongo-driver/bson"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

const (
	episodeCollectionName = "episode"
)

var (
	episodeFieldMap = map[string]string{
		"Id":          "_id",
		"Name":        "name",
		"ContentType": "content_type",
		"FilterType":  "filter_type",
		"Count":       "count",
		"IsOnline":    "is_online",
		"Keywords":    "keywords",
		"Outlines":    "outlines",
		"Qas":         "qas",
		"CreatedAt":   "created_at",
		"UpdatedAt":   "updated_at",
	}
	episodeObjectIdFieldSet = g.NewHashSetFrom[string]([]string{"_id"})
	episodeMeta             = &EpisodeMeta{}
)

type EpisodeMeta struct{}

func (m *EpisodeMeta) CollectionName() string {
	return episodeCollectionName
}

func (m *EpisodeMeta) IsObjectIdField(fieldName string) bool {
	return episodeObjectIdFieldSet.Contains(fieldName)
}

func (m *EpisodeMeta) UseIdObfuscating() bool {
	return true
}

func (m *EpisodeMeta) FieldMap() map[string]string {
	return episodeFieldMap
}

type EpisodeRepo struct {
	collection *mongo.Collection
	meta       collection.Meta
	helper     *log.Helper
}

func NewEpisodeRepo(mongoClient *mongodb.Client, logHelper *log.Helper) (*EpisodeRepo, error) {
	collection := mongoClient.Collection(episodeCollectionName)
	repo := &EpisodeRepo{
		collection: collection,
		meta:       episodeMeta,
		helper:     logHelper,
	}
	err := repo.createIndexes(context.Background())
	if err != nil {
		return nil, err
	}
	return repo, nil
}

func (r *EpisodeRepo) createIndexes(ctx context.Context) error {
	_, err := r.collection.Indexes().CreateMany(ctx, []mongo.IndexModel{
		mongo.IndexModel{
			Keys: bson.D{
				{"$**", 1},
			},
			Options: options.Index().SetUnique(false),
		},
		mongo.IndexModel{
			Keys: bson.D{
				{"$**", "text"},
			},
			Options: options.Index().SetUnique(false),
		},
	})
	if err != nil {
		return err
	}
	return nil
}

// Count 根据req指定的查询条件获取记录总数量
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *EpisodeRepo) Count(ctx context.Context, req *EpisodeCountReq) (*EpisodeCountRes, error) {
	l := logic.NewCountLogic[*EpisodeCountReq, *EpisodeCountRes](r.collection, r.meta, r.helper)
	return l.Count(ctx, req)
}

// List 根据req指定的查询条件获取记录列表
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *EpisodeRepo) List(ctx context.Context, req *EpisodeListReq) (*EpisodeListRes, error) {
	l := logic.NewListLogic[*EpisodeListReq, *EpisodeListRes, *Episode](r.collection, r.meta, r.helper)
	return l.List(ctx, req)
}

// One 根据req指定的查询条件获取单条数据
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *EpisodeRepo) One(ctx context.Context, req *EpisodeOneReq) (*EpisodeOneRes, error) {
	l := logic.NewOneLogic[*EpisodeOneReq, *EpisodeOneRes, *Episode](r.collection, r.meta, r.helper)
	return l.One(ctx, req)
}

// Get 根据主键/ID查询特定记录
func (r *EpisodeRepo) Get(ctx context.Context, req *EpisodeGetReq) (*EpisodeGetRes, error) {
	l := logic.NewGetLogic[*EpisodeGetReq, *EpisodeGetRes](r.collection, r.meta, r.helper)
	return l.Get(ctx, req)
}

// Create 插入记录
// 可包括表中除了 createdAt, updatedAt 之外的所有字段，支持字段类型自动转换，支持对非主键且可为空字段不赋值
// 未赋值或赋值为nil的字段将被更新为 NULL 或数据库表指定的DEFAULT
func (r *EpisodeRepo) Create(ctx context.Context, req *EpisodeCreateReq) (*EpisodeCreateRes, error) {
	l := logic.NewCreateLogic[*EpisodeCreateReq, *EpisodeCreateRes](r.collection, r.meta, r.helper)
	return l.Create(ctx, req)
}

// Update 根据主键更新对应记录
// 支持字段类型自动转换，支持对非主键字段赋值/不赋值
// 未赋值或赋值为nil的字段不参与更新（即不会修改原记录的字段值）
func (r *EpisodeRepo) Update(ctx context.Context, req *EpisodeUpdateReq) (*EpisodeUpdateRes, error) {
	l := logic.NewUpdateLogic[*EpisodeUpdateReq, *EpisodeUpdateRes](r.collection, r.meta, r.helper)
	return l.Update(ctx, req)
}

// Upsert 根据主键（或唯一索引）是否存在且已在req中赋值，更新或插入对应记录。
// 支持字段类型自动转换，支持对非主键字段赋值/不赋值
// 未赋值或赋值为nil的字段不参与更新（即不会修改原记录的字段值）
func (r *EpisodeRepo) Upsert(ctx context.Context, req *EpisodeUpsertReq) (*EpisodeUpsertRes, error) {
	l := logic.NewUpsertLogic[*EpisodeUpsertReq, *EpisodeUpsertRes](r.collection, r.meta, r.helper)
	return l.Upsert(ctx, req)
}

// Delete 根据主键删除对应记录
func (r *EpisodeRepo) Delete(ctx context.Context, req *EpisodeDeleteReq) (*EpisodeDeleteRes, error) {
	l := logic.NewDeleteLogic[*EpisodeDeleteReq, *EpisodeDeleteRes](r.collection, r.meta, r.helper)
	return l.Delete(ctx, req)
}

// DeleteMulti 根据req指定的条件删除表中记录（可能多条）
// 未赋值或或赋值为nil的字段不参与条件查询
func (r *EpisodeRepo) DeleteMulti(ctx context.Context, req *EpisodeDeleteMultiReq) (*EpisodeDeleteMultiRes, error) {
	l := logic.NewDeleteMultiLogic[*EpisodeDeleteMultiReq, *EpisodeDeleteMultiRes](r.collection, r.meta, r.helper)
	return l.DeleteMulti(ctx, req)
}

func (m *QuestionAnswer) SetStartTime(v *durationpb.Duration) {
	m.StartTime = v
}

func (m *QuestionAnswer) SetEndTime(v *durationpb.Duration) {
	m.EndTime = v
}

func (m *QuestionAnswer) SetQuestion(v *string) {
	m.Question = v
}

func (m *QuestionAnswer) SetAnswer(v *string) {
	m.Answer = v
}

func (m *Episode) SetId(v *string) {
	m.Id = v
}

func (m *Episode) SetName(v *string) {
	m.Name = v
}

func (m *Episode) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *Episode) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *Episode) SetCount(v *int32) {
	m.Count = v
}

func (m *Episode) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *Episode) SetKeywords(v []string) {
	m.Keywords = v
}

func (m *Episode) SetOutlines(v map[string]string) {
	m.Outlines = v
}

func (m *Episode) SetQas(v []*QuestionAnswer) {
	m.Qas = v
}

func (m *Episode) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *Episode) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *EpisodeCountReq_Test) SetName(v string) {
	m.Name = v
}

func (m *EpisodeCountReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *EpisodeCountReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *EpisodeCountReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *EpisodeCountReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *EpisodeCountReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *EpisodeCountReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *EpisodeCountReq) SetKeywords(v *anypb.Any) {
	m.Keywords = v
}

func (m *EpisodeCountReq) SetOutlines(v *anypb.Any) {
	m.Outlines = v
}

func (m *EpisodeCountReq) SetQas(v *anypb.Any) {
	m.Qas = v
}

func (m *EpisodeCountReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *EpisodeCountReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *EpisodeCountReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *EpisodeCountRes) SetTotalElements(v int64) {
	m.TotalElements = v
}

func (m *EpisodeOneReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *EpisodeOneReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *EpisodeOneReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *EpisodeOneReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *EpisodeOneReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *EpisodeOneReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *EpisodeOneReq) SetKeywords(v *anypb.Any) {
	m.Keywords = v
}

func (m *EpisodeOneReq) SetOutlines(v *anypb.Any) {
	m.Outlines = v
}

func (m *EpisodeOneReq) SetQas(v *anypb.Any) {
	m.Qas = v
}

func (m *EpisodeOneReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *EpisodeOneReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *EpisodeOneReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *EpisodeOneReq) SetPageRequest(v *orm.PageRequest) {
	m.PageRequest = v
}

func (m *EpisodeOneRes) SetFound(v bool) {
	m.Found = v
}

func (m *EpisodeOneRes) SetItem(v *Episode) {
	m.Item = v
}

func (m *EpisodeListReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *EpisodeListReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *EpisodeListReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *EpisodeListReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *EpisodeListReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *EpisodeListReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *EpisodeListReq) SetKeywords(v *anypb.Any) {
	m.Keywords = v
}

func (m *EpisodeListReq) SetOutlines(v *anypb.Any) {
	m.Outlines = v
}

func (m *EpisodeListReq) SetQas(v *anypb.Any) {
	m.Qas = v
}

func (m *EpisodeListReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *EpisodeListReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *EpisodeListReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *EpisodeListReq) SetPageRequest(v *orm.PageRequest) {
	m.PageRequest = v
}

func (m *EpisodeListRes) SetPageInfo(v *orm.PageInfo) {
	m.PageInfo = v
}

func (m *EpisodeListRes) SetItems(v []*Episode) {
	m.Items = v
}

func (m *EpisodeGetReq) SetId(v string) {
	m.Id = v
}

func (m *EpisodeGetRes) SetId(v *string) {
	m.Id = v
}

func (m *EpisodeGetRes) SetName(v *string) {
	m.Name = v
}

func (m *EpisodeGetRes) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *EpisodeGetRes) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *EpisodeGetRes) SetCount(v *int32) {
	m.Count = v
}

func (m *EpisodeGetRes) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *EpisodeGetRes) SetKeywords(v []string) {
	m.Keywords = v
}

func (m *EpisodeGetRes) SetOutlines(v map[string]string) {
	m.Outlines = v
}

func (m *EpisodeGetRes) SetQas(v []*QuestionAnswer) {
	m.Qas = v
}

func (m *EpisodeGetRes) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *EpisodeGetRes) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *EpisodeCreateReq) SetName(v *string) {
	m.Name = v
}

func (m *EpisodeCreateReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *EpisodeCreateReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *EpisodeCreateReq) SetCount(v *int32) {
	m.Count = v
}

func (m *EpisodeCreateReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *EpisodeCreateReq) SetKeywords(v []string) {
	m.Keywords = v
}

func (m *EpisodeCreateReq) SetOutlines(v map[string]string) {
	m.Outlines = v
}

func (m *EpisodeCreateReq) SetQas(v []*QuestionAnswer) {
	m.Qas = v
}

func (m *EpisodeCreateReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *EpisodeCreateReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *EpisodeCreateRes) SetMessage(v string) {
	m.Message = v
}

func (m *EpisodeCreateRes) SetInsertedID(v *string) {
	m.InsertedID = v
}

func (m *EpisodeCreateRes) SetInsertedCount(v int64) {
	m.InsertedCount = v
}

func (m *EpisodeUpdateReq) SetId(v string) {
	m.Id = v
}

func (m *EpisodeUpdateReq) SetName(v *string) {
	m.Name = v
}

func (m *EpisodeUpdateReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *EpisodeUpdateReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *EpisodeUpdateReq) SetCount(v *int32) {
	m.Count = v
}

func (m *EpisodeUpdateReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *EpisodeUpdateReq) SetKeywords(v []string) {
	m.Keywords = v
}

func (m *EpisodeUpdateReq) SetOutlines(v map[string]string) {
	m.Outlines = v
}

func (m *EpisodeUpdateReq) SetQas(v []*QuestionAnswer) {
	m.Qas = v
}

func (m *EpisodeUpdateReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *EpisodeUpdateReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *EpisodeUpdateRes) SetMessage(v string) {
	m.Message = v
}

func (m *EpisodeUpdateRes) SetMatchedCount(v int64) {
	m.MatchedCount = v
}

func (m *EpisodeUpdateRes) SetModifiedCount(v int64) {
	m.ModifiedCount = v
}

func (m *EpisodeUpsertReq) SetId(v string) {
	m.Id = v
}

func (m *EpisodeUpsertReq) SetName(v *string) {
	m.Name = v
}

func (m *EpisodeUpsertReq) SetContentType(v *enum.ContentType) {
	m.ContentType = v
}

func (m *EpisodeUpsertReq) SetFilterType(v *enum.FilterType) {
	m.FilterType = v
}

func (m *EpisodeUpsertReq) SetCount(v *int32) {
	m.Count = v
}

func (m *EpisodeUpsertReq) SetIsOnline(v *bool) {
	m.IsOnline = v
}

func (m *EpisodeUpsertReq) SetKeywords(v []string) {
	m.Keywords = v
}

func (m *EpisodeUpsertReq) SetOutlines(v map[string]string) {
	m.Outlines = v
}

func (m *EpisodeUpsertReq) SetQas(v []*QuestionAnswer) {
	m.Qas = v
}

func (m *EpisodeUpsertReq) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *EpisodeUpsertReq) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *EpisodeUpsertRes) SetMessage(v string) {
	m.Message = v
}

func (m *EpisodeUpsertRes) SetUpsertedID(v *string) {
	m.UpsertedID = v
}

func (m *EpisodeUpsertRes) SetMatchedCount(v int64) {
	m.MatchedCount = v
}

func (m *EpisodeUpsertRes) SetModifiedCount(v int64) {
	m.ModifiedCount = v
}

func (m *EpisodeUpsertRes) SetUpsertedCount(v int64) {
	m.UpsertedCount = v
}

func (m *EpisodeDeleteReq) SetId(v string) {
	m.Id = v
}

func (m *EpisodeDeleteRes) SetMessage(v string) {
	m.Message = v
}

func (m *EpisodeDeleteRes) SetDeletedCount(v int64) {
	m.DeletedCount = v
}

func (m *EpisodeDeleteMultiReq) SetId(v *anypb.Any) {
	m.Id = v
}

func (m *EpisodeDeleteMultiReq) SetName(v *anypb.Any) {
	m.Name = v
}

func (m *EpisodeDeleteMultiReq) SetContentType(v *anypb.Any) {
	m.ContentType = v
}

func (m *EpisodeDeleteMultiReq) SetFilterType(v *anypb.Any) {
	m.FilterType = v
}

func (m *EpisodeDeleteMultiReq) SetCount(v *anypb.Any) {
	m.Count = v
}

func (m *EpisodeDeleteMultiReq) SetIsOnline(v *anypb.Any) {
	m.IsOnline = v
}

func (m *EpisodeDeleteMultiReq) SetKeywords(v *anypb.Any) {
	m.Keywords = v
}

func (m *EpisodeDeleteMultiReq) SetOutlines(v *anypb.Any) {
	m.Outlines = v
}

func (m *EpisodeDeleteMultiReq) SetQas(v *anypb.Any) {
	m.Qas = v
}

func (m *EpisodeDeleteMultiReq) SetCreatedAt(v *anypb.Any) {
	m.CreatedAt = v
}

func (m *EpisodeDeleteMultiReq) SetUpdatedAt(v *anypb.Any) {
	m.UpdatedAt = v
}

func (m *EpisodeDeleteMultiReq) SetExtraFilters(v []*orm.PropertyFilter) {
	m.ExtraFilters = v
}

func (m *EpisodeDeleteMultiRes) SetMessage(v string) {
	m.Message = v
}

func (m *EpisodeDeleteMultiRes) SetDeletedCount(v int64) {
	m.DeletedCount = v
}
