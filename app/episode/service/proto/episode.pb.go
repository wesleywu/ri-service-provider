// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: app/episode/service/proto/episode.proto

package proto

import (
	_ "github.com/castbox/go-guru/pkg/goguru/cache"
	orm "github.com/castbox/go-guru/pkg/goguru/orm"
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	enum "github.com/wesleywu/ri-service-provider/app/episode/service/enum"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *durationpb.Duration `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,oneof" json:"startTime,omitempty" bson:"start_time,omitempty"`
	EndTime   *durationpb.Duration `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,oneof" json:"endTime,omitempty" bson:"end_time,omitempty"`
	Question  *string              `protobuf:"bytes,3,opt,name=question,proto3,oneof" json:"question,omitempty" bson:"question,omitempty"`
	Answer    *string              `protobuf:"bytes,4,opt,name=answer,proto3,oneof" json:"answer,omitempty" bson:"answer,omitempty"`
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{0}
}

func (x *QuestionAnswer) GetStartTime() *durationpb.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QuestionAnswer) GetEndTime() *durationpb.Duration {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QuestionAnswer) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

func (x *QuestionAnswer) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty" bson:"_id,omitempty"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name,omitempty"`
	ContentType *enum.ContentType      `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=proto.ContentType,oneof" json:"contentType,omitempty" bson:"content_type,omitempty"`
	FilterType  *enum.FilterType       `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=proto.FilterType,oneof" json:"filterType,omitempty" bson:"filter_type,omitempty"`
	Count       *int32                 `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty" bson:"count,omitempty"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3,oneof" json:"isOnline,omitempty" bson:"is_online,omitempty"`
	Keywords    []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty" bson:"keywords,omitempty"`
	Outlines    map[string]string      `protobuf:"bytes,8,rep,name=outlines,proto3" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outlines,omitempty"`
	Qas         []*QuestionAnswer      `protobuf:"bytes,9,rep,name=qas,proto3" json:"qas,omitempty" bson:"qas,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"createdAt,omitempty" bson:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updatedAt,omitempty" bson:"updated_at,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{1}
}

func (x *Episode) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Episode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Episode) GetContentType() enum.ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return enum.ContentType(0)
}

func (x *Episode) GetFilterType() enum.FilterType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return enum.FilterType(0)
}

func (x *Episode) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Episode) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *Episode) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Episode) GetOutlines() map[string]string {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *Episode) GetQas() []*QuestionAnswer {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *Episode) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Episode) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EpisodeCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *anypb.Any            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *anypb.Any            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType  *anypb.Any            `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"contentType,omitempty"`
	FilterType   *anypb.Any            `protobuf:"bytes,4,opt,name=filter_type,json=filterType,proto3" json:"filterType,omitempty"`
	Count        *anypb.Any            `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline     *anypb.Any            `protobuf:"bytes,6,opt,name=is_online,json=isOnline,proto3" json:"isOnline,omitempty"`
	Keywords     *anypb.Any            `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Outlines     *anypb.Any            `protobuf:"bytes,8,opt,name=outlines,proto3" json:"outlines,omitempty"`
	Qas          *anypb.Any            `protobuf:"bytes,9,opt,name=qas,proto3" json:"qas,omitempty"`
	CreatedAt    *anypb.Any            `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *anypb.Any            `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updatedAt,omitempty"`
	ExtraFilters []*orm.PropertyFilter `protobuf:"bytes,1001,rep,name=extra_filters,json=extraFilters,proto3" json:"extraFilters,omitempty"`
}

func (x *EpisodeCountReq) Reset() {
	*x = EpisodeCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeCountReq) ProtoMessage() {}

func (x *EpisodeCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeCountReq.ProtoReflect.Descriptor instead.
func (*EpisodeCountReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{2}
}

func (x *EpisodeCountReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeCountReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EpisodeCountReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *EpisodeCountReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *EpisodeCountReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *EpisodeCountReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *EpisodeCountReq) GetKeywords() *anypb.Any {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeCountReq) GetOutlines() *anypb.Any {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeCountReq) GetQas() *anypb.Any {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeCountReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeCountReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EpisodeCountReq) GetExtraFilters() []*orm.PropertyFilter {
	if x != nil {
		return x.ExtraFilters
	}
	return nil
}

type EpisodeCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalElements int64 `protobuf:"varint,1,opt,name=totalElements,proto3" json:"total"`
}

func (x *EpisodeCountRes) Reset() {
	*x = EpisodeCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeCountRes) ProtoMessage() {}

func (x *EpisodeCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeCountRes.ProtoReflect.Descriptor instead.
func (*EpisodeCountRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{3}
}

func (x *EpisodeCountRes) GetTotalElements() int64 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

type EpisodeOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *anypb.Any            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *anypb.Any            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType  *anypb.Any            `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"contentType,omitempty"`
	FilterType   *anypb.Any            `protobuf:"bytes,4,opt,name=filter_type,json=filterType,proto3" json:"filterType,omitempty"`
	Count        *anypb.Any            `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline     *anypb.Any            `protobuf:"bytes,6,opt,name=is_online,json=isOnline,proto3" json:"isOnline,omitempty"`
	Keywords     *anypb.Any            `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Outlines     *anypb.Any            `protobuf:"bytes,8,opt,name=outlines,proto3" json:"outlines,omitempty"`
	Qas          *anypb.Any            `protobuf:"bytes,9,opt,name=qas,proto3" json:"qas,omitempty"`
	CreatedAt    *anypb.Any            `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *anypb.Any            `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updatedAt,omitempty"`
	ExtraFilters []*orm.PropertyFilter `protobuf:"bytes,1001,rep,name=extra_filters,json=extraFilters,proto3" json:"extraFilters,omitempty"`
	PageRequest  *orm.PageRequest      `protobuf:"bytes,1002,opt,name=page_request,json=pageRequest,proto3" json:"pageRequest,omitempty"`
}

func (x *EpisodeOneReq) Reset() {
	*x = EpisodeOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOneReq) ProtoMessage() {}

func (x *EpisodeOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOneReq.ProtoReflect.Descriptor instead.
func (*EpisodeOneReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{4}
}

func (x *EpisodeOneReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOneReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EpisodeOneReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *EpisodeOneReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *EpisodeOneReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *EpisodeOneReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *EpisodeOneReq) GetKeywords() *anypb.Any {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeOneReq) GetOutlines() *anypb.Any {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeOneReq) GetQas() *anypb.Any {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeOneReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeOneReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EpisodeOneReq) GetExtraFilters() []*orm.PropertyFilter {
	if x != nil {
		return x.ExtraFilters
	}
	return nil
}

func (x *EpisodeOneReq) GetPageRequest() *orm.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

type EpisodeOneRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool     `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Item  *Episode `protobuf:"bytes,2,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (x *EpisodeOneRes) Reset() {
	*x = EpisodeOneRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOneRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOneRes) ProtoMessage() {}

func (x *EpisodeOneRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOneRes.ProtoReflect.Descriptor instead.
func (*EpisodeOneRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{5}
}

func (x *EpisodeOneRes) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *EpisodeOneRes) GetItem() *Episode {
	if x != nil {
		return x.Item
	}
	return nil
}

type EpisodeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *anypb.Any            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *anypb.Any            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType  *anypb.Any            `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"contentType,omitempty"`
	FilterType   *anypb.Any            `protobuf:"bytes,4,opt,name=filter_type,json=filterType,proto3" json:"filterType,omitempty"`
	Count        *anypb.Any            `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline     *anypb.Any            `protobuf:"bytes,6,opt,name=is_online,json=isOnline,proto3" json:"isOnline,omitempty"`
	Keywords     *anypb.Any            `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Outlines     *anypb.Any            `protobuf:"bytes,8,opt,name=outlines,proto3" json:"outlines,omitempty"`
	Qas          *anypb.Any            `protobuf:"bytes,9,opt,name=qas,proto3" json:"qas,omitempty"`
	CreatedAt    *anypb.Any            `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *anypb.Any            `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updatedAt,omitempty"`
	ExtraFilters []*orm.PropertyFilter `protobuf:"bytes,1001,rep,name=extra_filters,json=extraFilters,proto3" json:"extraFilters,omitempty"`
	PageRequest  *orm.PageRequest      `protobuf:"bytes,1002,opt,name=page_request,json=pageRequest,proto3" json:"pageRequest,omitempty"`
}

func (x *EpisodeListReq) Reset() {
	*x = EpisodeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeListReq) ProtoMessage() {}

func (x *EpisodeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeListReq.ProtoReflect.Descriptor instead.
func (*EpisodeListReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{6}
}

func (x *EpisodeListReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeListReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EpisodeListReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *EpisodeListReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *EpisodeListReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *EpisodeListReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *EpisodeListReq) GetKeywords() *anypb.Any {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeListReq) GetOutlines() *anypb.Any {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeListReq) GetQas() *anypb.Any {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeListReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeListReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EpisodeListReq) GetExtraFilters() []*orm.PropertyFilter {
	if x != nil {
		return x.ExtraFilters
	}
	return nil
}

func (x *EpisodeListReq) GetPageRequest() *orm.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

type EpisodeListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *orm.PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo"`
	Items    []*Episode    `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *EpisodeListRes) Reset() {
	*x = EpisodeListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeListRes) ProtoMessage() {}

func (x *EpisodeListRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeListRes.ProtoReflect.Descriptor instead.
func (*EpisodeListRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{7}
}

func (x *EpisodeListRes) GetPageInfo() *orm.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *EpisodeListRes) GetItems() []*Episode {
	if x != nil {
		return x.Items
	}
	return nil
}

type EpisodeGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
}

func (x *EpisodeGetReq) Reset() {
	*x = EpisodeGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeGetReq) ProtoMessage() {}

func (x *EpisodeGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeGetReq.ProtoReflect.Descriptor instead.
func (*EpisodeGetReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{8}
}

func (x *EpisodeGetReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EpisodeGetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty" bson:"_id,omitempty"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name,omitempty"`
	ContentType *enum.ContentType      `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=proto.ContentType,oneof" json:"contentType,omitempty" bson:"content_type,omitempty"`
	FilterType  *enum.FilterType       `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=proto.FilterType,oneof" json:"filterType,omitempty" bson:"filter_type,omitempty"`
	Count       *int32                 `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty" bson:"count,omitempty"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3,oneof" json:"isOnline,omitempty" bson:"is_online,omitempty"`
	Keywords    []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty" bson:"keywords,omitempty"`
	Outlines    map[string]string      `protobuf:"bytes,8,rep,name=outlines,proto3" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outlines,omitempty"`
	Qas         []*QuestionAnswer      `protobuf:"bytes,9,rep,name=qas,proto3" json:"qas,omitempty" bson:"qas,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"createdAt,omitempty" bson:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updatedAt,omitempty" bson:"updated_at,omitempty"`
}

func (x *EpisodeGetRes) Reset() {
	*x = EpisodeGetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeGetRes) ProtoMessage() {}

func (x *EpisodeGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeGetRes.ProtoReflect.Descriptor instead.
func (*EpisodeGetRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{9}
}

func (x *EpisodeGetRes) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EpisodeGetRes) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EpisodeGetRes) GetContentType() enum.ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return enum.ContentType(0)
}

func (x *EpisodeGetRes) GetFilterType() enum.FilterType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return enum.FilterType(0)
}

func (x *EpisodeGetRes) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EpisodeGetRes) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *EpisodeGetRes) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeGetRes) GetOutlines() map[string]string {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeGetRes) GetQas() []*QuestionAnswer {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeGetRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeGetRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EpisodeCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name,omitempty"`
	ContentType *enum.ContentType      `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=proto.ContentType,oneof" json:"contentType,omitempty" bson:"content_type,omitempty"`
	FilterType  *enum.FilterType       `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=proto.FilterType,oneof" json:"filterType,omitempty" bson:"filter_type,omitempty"`
	Count       *int32                 `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty" bson:"count,omitempty"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3,oneof" json:"isOnline,omitempty" bson:"is_online,omitempty"`
	Keywords    []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty" bson:"keywords,omitempty"`
	Outlines    map[string]string      `protobuf:"bytes,8,rep,name=outlines,proto3" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outlines,omitempty"`
	Qas         []*QuestionAnswer      `protobuf:"bytes,9,rep,name=qas,proto3" json:"qas,omitempty" bson:"qas,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"createdAt,omitempty" bson:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updatedAt,omitempty" bson:"updated_at,omitempty"`
}

func (x *EpisodeCreateReq) Reset() {
	*x = EpisodeCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeCreateReq) ProtoMessage() {}

func (x *EpisodeCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeCreateReq.ProtoReflect.Descriptor instead.
func (*EpisodeCreateReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{10}
}

func (x *EpisodeCreateReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EpisodeCreateReq) GetContentType() enum.ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return enum.ContentType(0)
}

func (x *EpisodeCreateReq) GetFilterType() enum.FilterType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return enum.FilterType(0)
}

func (x *EpisodeCreateReq) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EpisodeCreateReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *EpisodeCreateReq) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeCreateReq) GetOutlines() map[string]string {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeCreateReq) GetQas() []*QuestionAnswer {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeCreateReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeCreateReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EpisodeCreateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	InsertedID    *string `protobuf:"bytes,2,opt,name=insertedID,proto3,oneof" json:"insertedID"`
	InsertedCount int64   `protobuf:"varint,3,opt,name=insertedCount,proto3" json:"insertedCount"`
}

func (x *EpisodeCreateRes) Reset() {
	*x = EpisodeCreateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeCreateRes) ProtoMessage() {}

func (x *EpisodeCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeCreateRes.ProtoReflect.Descriptor instead.
func (*EpisodeCreateRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{11}
}

func (x *EpisodeCreateRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EpisodeCreateRes) GetInsertedID() string {
	if x != nil && x.InsertedID != nil {
		return *x.InsertedID
	}
	return ""
}

func (x *EpisodeCreateRes) GetInsertedCount() int64 {
	if x != nil {
		return x.InsertedCount
	}
	return 0
}

type EpisodeUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name,omitempty"`
	ContentType *enum.ContentType      `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=proto.ContentType,oneof" json:"contentType,omitempty" bson:"content_type,omitempty"`
	FilterType  *enum.FilterType       `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=proto.FilterType,oneof" json:"filterType,omitempty" bson:"filter_type,omitempty"`
	Count       *int32                 `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty" bson:"count,omitempty"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3,oneof" json:"isOnline,omitempty" bson:"is_online,omitempty"`
	Keywords    []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty" bson:"keywords,omitempty"`
	Outlines    map[string]string      `protobuf:"bytes,8,rep,name=outlines,proto3" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outlines,omitempty"`
	Qas         []*QuestionAnswer      `protobuf:"bytes,9,rep,name=qas,proto3" json:"qas,omitempty" bson:"qas,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"createdAt,omitempty" bson:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updatedAt,omitempty" bson:"updated_at,omitempty"`
}

func (x *EpisodeUpdateReq) Reset() {
	*x = EpisodeUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeUpdateReq) ProtoMessage() {}

func (x *EpisodeUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeUpdateReq.ProtoReflect.Descriptor instead.
func (*EpisodeUpdateReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{12}
}

func (x *EpisodeUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EpisodeUpdateReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EpisodeUpdateReq) GetContentType() enum.ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return enum.ContentType(0)
}

func (x *EpisodeUpdateReq) GetFilterType() enum.FilterType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return enum.FilterType(0)
}

func (x *EpisodeUpdateReq) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EpisodeUpdateReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *EpisodeUpdateReq) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeUpdateReq) GetOutlines() map[string]string {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeUpdateReq) GetQas() []*QuestionAnswer {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeUpdateReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeUpdateReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EpisodeUpdateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	MatchedCount  int64  `protobuf:"varint,2,opt,name=matchedCount,proto3" json:"matchedCount"`   // The number of documents matched by the upsert operation
	ModifiedCount int64  `protobuf:"varint,3,opt,name=modifiedCount,proto3" json:"modifiedCount"` // The number of documents modified by the operation.
}

func (x *EpisodeUpdateRes) Reset() {
	*x = EpisodeUpdateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeUpdateRes) ProtoMessage() {}

func (x *EpisodeUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeUpdateRes.ProtoReflect.Descriptor instead.
func (*EpisodeUpdateRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{13}
}

func (x *EpisodeUpdateRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EpisodeUpdateRes) GetMatchedCount() int64 {
	if x != nil {
		return x.MatchedCount
	}
	return 0
}

func (x *EpisodeUpdateRes) GetModifiedCount() int64 {
	if x != nil {
		return x.ModifiedCount
	}
	return 0
}

type EpisodeUpsertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name,omitempty"`
	ContentType *enum.ContentType      `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=proto.ContentType,oneof" json:"contentType,omitempty" bson:"content_type,omitempty"`
	FilterType  *enum.FilterType       `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=proto.FilterType,oneof" json:"filterType,omitempty" bson:"filter_type,omitempty"`
	Count       *int32                 `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty" bson:"count,omitempty"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3,oneof" json:"isOnline,omitempty" bson:"is_online,omitempty"`
	Keywords    []string               `protobuf:"bytes,7,rep,name=keywords,proto3" json:"keywords,omitempty" bson:"keywords,omitempty"`
	Outlines    map[string]string      `protobuf:"bytes,8,rep,name=outlines,proto3" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outlines,omitempty"`
	Qas         []*QuestionAnswer      `protobuf:"bytes,9,rep,name=qas,proto3" json:"qas,omitempty" bson:"qas,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"createdAt,omitempty" bson:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updatedAt,omitempty" bson:"updated_at,omitempty"`
}

func (x *EpisodeUpsertReq) Reset() {
	*x = EpisodeUpsertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeUpsertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeUpsertReq) ProtoMessage() {}

func (x *EpisodeUpsertReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeUpsertReq.ProtoReflect.Descriptor instead.
func (*EpisodeUpsertReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{14}
}

func (x *EpisodeUpsertReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EpisodeUpsertReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EpisodeUpsertReq) GetContentType() enum.ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return enum.ContentType(0)
}

func (x *EpisodeUpsertReq) GetFilterType() enum.FilterType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return enum.FilterType(0)
}

func (x *EpisodeUpsertReq) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EpisodeUpsertReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *EpisodeUpsertReq) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeUpsertReq) GetOutlines() map[string]string {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeUpsertReq) GetQas() []*QuestionAnswer {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeUpsertReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeUpsertReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EpisodeUpsertRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	UpsertedID    *string `protobuf:"bytes,2,opt,name=upsertedID,proto3,oneof" json:"upsertedID"`
	MatchedCount  int64   `protobuf:"varint,3,opt,name=matchedCount,proto3" json:"matchedCount"`   // The number of documents matched by the upsert operation
	ModifiedCount int64   `protobuf:"varint,4,opt,name=modifiedCount,proto3" json:"modifiedCount"` // The number of documents modified by the operation.
	UpsertedCount int64   `protobuf:"varint,5,opt,name=upsertedCount,proto3" json:"upsertedCount"` // The number of documents upserted by the operation.
}

func (x *EpisodeUpsertRes) Reset() {
	*x = EpisodeUpsertRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeUpsertRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeUpsertRes) ProtoMessage() {}

func (x *EpisodeUpsertRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeUpsertRes.ProtoReflect.Descriptor instead.
func (*EpisodeUpsertRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{15}
}

func (x *EpisodeUpsertRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EpisodeUpsertRes) GetUpsertedID() string {
	if x != nil && x.UpsertedID != nil {
		return *x.UpsertedID
	}
	return ""
}

func (x *EpisodeUpsertRes) GetMatchedCount() int64 {
	if x != nil {
		return x.MatchedCount
	}
	return 0
}

func (x *EpisodeUpsertRes) GetModifiedCount() int64 {
	if x != nil {
		return x.ModifiedCount
	}
	return 0
}

func (x *EpisodeUpsertRes) GetUpsertedCount() int64 {
	if x != nil {
		return x.UpsertedCount
	}
	return 0
}

type EpisodeDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
}

func (x *EpisodeDeleteReq) Reset() {
	*x = EpisodeDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeDeleteReq) ProtoMessage() {}

func (x *EpisodeDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeDeleteReq.ProtoReflect.Descriptor instead.
func (*EpisodeDeleteReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{16}
}

func (x *EpisodeDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EpisodeDeleteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	DeletedCount int64  `protobuf:"varint,2,opt,name=deletedCount,proto3" json:"deletedCount"`
}

func (x *EpisodeDeleteRes) Reset() {
	*x = EpisodeDeleteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeDeleteRes) ProtoMessage() {}

func (x *EpisodeDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeDeleteRes.ProtoReflect.Descriptor instead.
func (*EpisodeDeleteRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{17}
}

func (x *EpisodeDeleteRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EpisodeDeleteRes) GetDeletedCount() int64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

type EpisodeDeleteMultiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *anypb.Any            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *anypb.Any            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType  *anypb.Any            `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"contentType,omitempty"`
	FilterType   *anypb.Any            `protobuf:"bytes,4,opt,name=filter_type,json=filterType,proto3" json:"filterType,omitempty"`
	Count        *anypb.Any            `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline     *anypb.Any            `protobuf:"bytes,6,opt,name=is_online,json=isOnline,proto3" json:"isOnline,omitempty"`
	Keywords     *anypb.Any            `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Outlines     *anypb.Any            `protobuf:"bytes,8,opt,name=outlines,proto3" json:"outlines,omitempty"`
	Qas          *anypb.Any            `protobuf:"bytes,9,opt,name=qas,proto3" json:"qas,omitempty"`
	CreatedAt    *anypb.Any            `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *anypb.Any            `protobuf:"bytes,102,opt,name=updated_at,json=updatedAt,proto3" json:"updatedAt,omitempty"`
	ExtraFilters []*orm.PropertyFilter `protobuf:"bytes,1001,rep,name=extra_filters,json=extraFilters,proto3" json:"extraFilters,omitempty"`
}

func (x *EpisodeDeleteMultiReq) Reset() {
	*x = EpisodeDeleteMultiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeDeleteMultiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeDeleteMultiReq) ProtoMessage() {}

func (x *EpisodeDeleteMultiReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeDeleteMultiReq.ProtoReflect.Descriptor instead.
func (*EpisodeDeleteMultiReq) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{18}
}

func (x *EpisodeDeleteMultiReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetKeywords() *anypb.Any {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetOutlines() *anypb.Any {
	if x != nil {
		return x.Outlines
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetQas() *anypb.Any {
	if x != nil {
		return x.Qas
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EpisodeDeleteMultiReq) GetExtraFilters() []*orm.PropertyFilter {
	if x != nil {
		return x.ExtraFilters
	}
	return nil
}

type EpisodeDeleteMultiRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	DeletedCount int64  `protobuf:"varint,2,opt,name=deletedCount,proto3" json:"deletedCount"`
}

func (x *EpisodeDeleteMultiRes) Reset() {
	*x = EpisodeDeleteMultiRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeDeleteMultiRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeDeleteMultiRes) ProtoMessage() {}

func (x *EpisodeDeleteMultiRes) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeDeleteMultiRes.ProtoReflect.Descriptor instead.
func (*EpisodeDeleteMultiRes) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{19}
}

func (x *EpisodeDeleteMultiRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EpisodeDeleteMultiRes) GetDeletedCount() int64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

type EpisodeCountReq_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EpisodeCountReq_Test) Reset() {
	*x = EpisodeCountReq_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_episode_service_proto_episode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeCountReq_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeCountReq_Test) ProtoMessage() {}

func (x *EpisodeCountReq_Test) ProtoReflect() protoreflect.Message {
	mi := &file_app_episode_service_proto_episode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeCountReq_Test.ProtoReflect.Descriptor instead.
func (*EpisodeCountReq_Test) Descriptor() ([]byte, []int) {
	return file_app_episode_service_proto_episode_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EpisodeCountReq_Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_app_episode_service_proto_episode_proto protoreflect.FileDescriptor

var file_app_episode_service_proto_episode_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x70, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x67,
	0x75, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x6d, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x70, 0x2f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x37, 0x9a, 0x84, 0x9e, 0x03, 0x32, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x9a, 0x84,
	0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x9a, 0x84, 0x9e, 0x03, 0x2f, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xa4, 0x0a, 0x0a,
	0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03,
	0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x3f, 0x9a, 0x84, 0x9e, 0x03, 0x3a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x9a, 0x84,
	0x9e, 0x03, 0x38, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x32, 0x9a, 0x84, 0x9e,
	0x03, 0x2d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x39,
	0x9a, 0x84, 0x9e, 0x03, 0x34, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03,
	0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x72,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x38,
	0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x2e, 0x9a, 0x84, 0x9e, 0x03, 0x29, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84, 0x9e,
	0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x28, 0xea, 0xe4, 0x1f, 0x24, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x12, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x24, 0x2a,
	0x2a, 0x22, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x24, 0x2a, 0x2a, 0x10, 0x02, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0xfd, 0x07, 0x0a, 0x0f, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e,
	0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x50, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x03, 0x71, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x64, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x67, 0x75,
	0x72, 0x75, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0f, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x9a,
	0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xbf, 0x08, 0x0a, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20,
	0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e,
	0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03,
	0x71, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12,
	0x54, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x64, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0xe9, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72,
	0x75, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x57, 0x0a, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xc0, 0x08, 0x0a, 0x0e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03,
	0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1b, 0x9a,
	0x84, 0x9e, 0x03, 0x16, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03,
	0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84,
	0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e,
	0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x19, 0x9a, 0x84, 0x9e,
	0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x54, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84, 0x9e,
	0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x64, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x22, 0x9a, 0x84, 0x9e,
	0x03, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a,
	0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72,
	0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x21, 0x9a,
	0x84, 0x9e, 0x03, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x0e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x6d, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x38, 0x0a, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x9a, 0x84, 0x9e, 0x03, 0x12, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x0a, 0x0a, 0x0d,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x9a, 0x84, 0x9e, 0x03, 0x3a, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x5b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x39, 0x9a, 0x84, 0x9e, 0x03, 0x34, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05,
	0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x03, 0x71, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x42, 0x2e, 0x9a, 0x84, 0x9e, 0x03, 0x29, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0xc1, 0x09, 0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f,
	0x9a, 0x84, 0x9e, 0x03, 0x3a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x76, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x39, 0x9a, 0x84, 0x9e,
	0x03, 0x34, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x7b, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x2e, 0x9a, 0x84,
	0x9e, 0x03, 0x29, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61,
	0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b,
	0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x22, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x22, 0xea, 0x09, 0x0a, 0x10, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03,
	0x12, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x9a, 0x84,
	0x9e, 0x03, 0x3a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x76, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x39, 0x9a, 0x84, 0x9e, 0x03, 0x34,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x7b, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x2e, 0x9a, 0x84, 0x9e, 0x03,
	0x29, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12,
	0x7b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84,
	0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84,
	0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xea, 0x09, 0x0a, 0x10, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03,
	0x12, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x9a, 0x84,
	0x9e, 0x03, 0x3a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x76, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x39, 0x9a, 0x84, 0x9e, 0x03, 0x34,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x7b, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x71, 0x61, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x2e, 0x9a, 0x84, 0x9e, 0x03,
	0x29, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12,
	0x7b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x3b, 0x9a, 0x84, 0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0x9a, 0x84,
	0x9e, 0x03, 0x36, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xcd, 0x02, 0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84,
	0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x44, 0x22, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a,
	0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x9a, 0x84,
	0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x9a,
	0x84, 0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x12, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a, 0x84,
	0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x07, 0x0a, 0x15, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x9a, 0x84, 0x9e,
	0x03, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1b,
	0x9a, 0x84, 0x9e, 0x03, 0x16, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a, 0x84, 0x9e,
	0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1e, 0x9a,
	0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x71, 0x61, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x19, 0x9a, 0x84,
	0x9e, 0x03, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x61, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x71, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1f, 0x9a, 0x84,
	0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x64, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x22, 0x9a, 0x84,
	0x9e, 0x03, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x15, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a,
	0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x9d, 0x04, 0x0a, 0x0b, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x42, 0x70, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x47,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x73, 0x6c, 0x65,
	0x79, 0x77, 0x75, 0x2f, 0x72, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_episode_service_proto_episode_proto_rawDescOnce sync.Once
	file_app_episode_service_proto_episode_proto_rawDescData = file_app_episode_service_proto_episode_proto_rawDesc
)

func file_app_episode_service_proto_episode_proto_rawDescGZIP() []byte {
	file_app_episode_service_proto_episode_proto_rawDescOnce.Do(func() {
		file_app_episode_service_proto_episode_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_episode_service_proto_episode_proto_rawDescData)
	})
	return file_app_episode_service_proto_episode_proto_rawDescData
}

var file_app_episode_service_proto_episode_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_app_episode_service_proto_episode_proto_goTypes = []any{
	(*QuestionAnswer)(nil),        // 0: proto.QuestionAnswer
	(*Episode)(nil),               // 1: proto.Episode
	(*EpisodeCountReq)(nil),       // 2: proto.EpisodeCountReq
	(*EpisodeCountRes)(nil),       // 3: proto.EpisodeCountRes
	(*EpisodeOneReq)(nil),         // 4: proto.EpisodeOneReq
	(*EpisodeOneRes)(nil),         // 5: proto.EpisodeOneRes
	(*EpisodeListReq)(nil),        // 6: proto.EpisodeListReq
	(*EpisodeListRes)(nil),        // 7: proto.EpisodeListRes
	(*EpisodeGetReq)(nil),         // 8: proto.EpisodeGetReq
	(*EpisodeGetRes)(nil),         // 9: proto.EpisodeGetRes
	(*EpisodeCreateReq)(nil),      // 10: proto.EpisodeCreateReq
	(*EpisodeCreateRes)(nil),      // 11: proto.EpisodeCreateRes
	(*EpisodeUpdateReq)(nil),      // 12: proto.EpisodeUpdateReq
	(*EpisodeUpdateRes)(nil),      // 13: proto.EpisodeUpdateRes
	(*EpisodeUpsertReq)(nil),      // 14: proto.EpisodeUpsertReq
	(*EpisodeUpsertRes)(nil),      // 15: proto.EpisodeUpsertRes
	(*EpisodeDeleteReq)(nil),      // 16: proto.EpisodeDeleteReq
	(*EpisodeDeleteRes)(nil),      // 17: proto.EpisodeDeleteRes
	(*EpisodeDeleteMultiReq)(nil), // 18: proto.EpisodeDeleteMultiReq
	(*EpisodeDeleteMultiRes)(nil), // 19: proto.EpisodeDeleteMultiRes
	nil,                           // 20: proto.Episode.OutlinesEntry
	(*EpisodeCountReq_Test)(nil),  // 21: proto.EpisodeCountReq.Test
	nil,                           // 22: proto.EpisodeGetRes.OutlinesEntry
	nil,                           // 23: proto.EpisodeCreateReq.OutlinesEntry
	nil,                           // 24: proto.EpisodeUpdateReq.OutlinesEntry
	nil,                           // 25: proto.EpisodeUpsertReq.OutlinesEntry
	(*durationpb.Duration)(nil),   // 26: google.protobuf.Duration
	(enum.ContentType)(0),         // 27: proto.ContentType
	(enum.FilterType)(0),          // 28: proto.FilterType
	(*timestamppb.Timestamp)(nil), // 29: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 30: google.protobuf.Any
	(*orm.PropertyFilter)(nil),    // 31: goguru.orm.PropertyFilter
	(*orm.PageRequest)(nil),       // 32: goguru.orm.PageRequest
	(*orm.PageInfo)(nil),          // 33: goguru.orm.PageInfo
}
var file_app_episode_service_proto_episode_proto_depIdxs = []int32{
	26, // 0: proto.QuestionAnswer.start_time:type_name -> google.protobuf.Duration
	26, // 1: proto.QuestionAnswer.end_time:type_name -> google.protobuf.Duration
	27, // 2: proto.Episode.content_type:type_name -> proto.ContentType
	28, // 3: proto.Episode.filter_type:type_name -> proto.FilterType
	20, // 4: proto.Episode.outlines:type_name -> proto.Episode.OutlinesEntry
	0,  // 5: proto.Episode.qas:type_name -> proto.QuestionAnswer
	29, // 6: proto.Episode.created_at:type_name -> google.protobuf.Timestamp
	29, // 7: proto.Episode.updated_at:type_name -> google.protobuf.Timestamp
	30, // 8: proto.EpisodeCountReq.id:type_name -> google.protobuf.Any
	30, // 9: proto.EpisodeCountReq.name:type_name -> google.protobuf.Any
	30, // 10: proto.EpisodeCountReq.content_type:type_name -> google.protobuf.Any
	30, // 11: proto.EpisodeCountReq.filter_type:type_name -> google.protobuf.Any
	30, // 12: proto.EpisodeCountReq.count:type_name -> google.protobuf.Any
	30, // 13: proto.EpisodeCountReq.is_online:type_name -> google.protobuf.Any
	30, // 14: proto.EpisodeCountReq.keywords:type_name -> google.protobuf.Any
	30, // 15: proto.EpisodeCountReq.outlines:type_name -> google.protobuf.Any
	30, // 16: proto.EpisodeCountReq.qas:type_name -> google.protobuf.Any
	30, // 17: proto.EpisodeCountReq.created_at:type_name -> google.protobuf.Any
	30, // 18: proto.EpisodeCountReq.updated_at:type_name -> google.protobuf.Any
	31, // 19: proto.EpisodeCountReq.extra_filters:type_name -> goguru.orm.PropertyFilter
	30, // 20: proto.EpisodeOneReq.id:type_name -> google.protobuf.Any
	30, // 21: proto.EpisodeOneReq.name:type_name -> google.protobuf.Any
	30, // 22: proto.EpisodeOneReq.content_type:type_name -> google.protobuf.Any
	30, // 23: proto.EpisodeOneReq.filter_type:type_name -> google.protobuf.Any
	30, // 24: proto.EpisodeOneReq.count:type_name -> google.protobuf.Any
	30, // 25: proto.EpisodeOneReq.is_online:type_name -> google.protobuf.Any
	30, // 26: proto.EpisodeOneReq.keywords:type_name -> google.protobuf.Any
	30, // 27: proto.EpisodeOneReq.outlines:type_name -> google.protobuf.Any
	30, // 28: proto.EpisodeOneReq.qas:type_name -> google.protobuf.Any
	30, // 29: proto.EpisodeOneReq.created_at:type_name -> google.protobuf.Any
	30, // 30: proto.EpisodeOneReq.updated_at:type_name -> google.protobuf.Any
	31, // 31: proto.EpisodeOneReq.extra_filters:type_name -> goguru.orm.PropertyFilter
	32, // 32: proto.EpisodeOneReq.page_request:type_name -> goguru.orm.PageRequest
	1,  // 33: proto.EpisodeOneRes.item:type_name -> proto.Episode
	30, // 34: proto.EpisodeListReq.id:type_name -> google.protobuf.Any
	30, // 35: proto.EpisodeListReq.name:type_name -> google.protobuf.Any
	30, // 36: proto.EpisodeListReq.content_type:type_name -> google.protobuf.Any
	30, // 37: proto.EpisodeListReq.filter_type:type_name -> google.protobuf.Any
	30, // 38: proto.EpisodeListReq.count:type_name -> google.protobuf.Any
	30, // 39: proto.EpisodeListReq.is_online:type_name -> google.protobuf.Any
	30, // 40: proto.EpisodeListReq.keywords:type_name -> google.protobuf.Any
	30, // 41: proto.EpisodeListReq.outlines:type_name -> google.protobuf.Any
	30, // 42: proto.EpisodeListReq.qas:type_name -> google.protobuf.Any
	30, // 43: proto.EpisodeListReq.created_at:type_name -> google.protobuf.Any
	30, // 44: proto.EpisodeListReq.updated_at:type_name -> google.protobuf.Any
	31, // 45: proto.EpisodeListReq.extra_filters:type_name -> goguru.orm.PropertyFilter
	32, // 46: proto.EpisodeListReq.page_request:type_name -> goguru.orm.PageRequest
	33, // 47: proto.EpisodeListRes.pageInfo:type_name -> goguru.orm.PageInfo
	1,  // 48: proto.EpisodeListRes.items:type_name -> proto.Episode
	27, // 49: proto.EpisodeGetRes.content_type:type_name -> proto.ContentType
	28, // 50: proto.EpisodeGetRes.filter_type:type_name -> proto.FilterType
	22, // 51: proto.EpisodeGetRes.outlines:type_name -> proto.EpisodeGetRes.OutlinesEntry
	0,  // 52: proto.EpisodeGetRes.qas:type_name -> proto.QuestionAnswer
	29, // 53: proto.EpisodeGetRes.created_at:type_name -> google.protobuf.Timestamp
	29, // 54: proto.EpisodeGetRes.updated_at:type_name -> google.protobuf.Timestamp
	27, // 55: proto.EpisodeCreateReq.content_type:type_name -> proto.ContentType
	28, // 56: proto.EpisodeCreateReq.filter_type:type_name -> proto.FilterType
	23, // 57: proto.EpisodeCreateReq.outlines:type_name -> proto.EpisodeCreateReq.OutlinesEntry
	0,  // 58: proto.EpisodeCreateReq.qas:type_name -> proto.QuestionAnswer
	29, // 59: proto.EpisodeCreateReq.created_at:type_name -> google.protobuf.Timestamp
	29, // 60: proto.EpisodeCreateReq.updated_at:type_name -> google.protobuf.Timestamp
	27, // 61: proto.EpisodeUpdateReq.content_type:type_name -> proto.ContentType
	28, // 62: proto.EpisodeUpdateReq.filter_type:type_name -> proto.FilterType
	24, // 63: proto.EpisodeUpdateReq.outlines:type_name -> proto.EpisodeUpdateReq.OutlinesEntry
	0,  // 64: proto.EpisodeUpdateReq.qas:type_name -> proto.QuestionAnswer
	29, // 65: proto.EpisodeUpdateReq.created_at:type_name -> google.protobuf.Timestamp
	29, // 66: proto.EpisodeUpdateReq.updated_at:type_name -> google.protobuf.Timestamp
	27, // 67: proto.EpisodeUpsertReq.content_type:type_name -> proto.ContentType
	28, // 68: proto.EpisodeUpsertReq.filter_type:type_name -> proto.FilterType
	25, // 69: proto.EpisodeUpsertReq.outlines:type_name -> proto.EpisodeUpsertReq.OutlinesEntry
	0,  // 70: proto.EpisodeUpsertReq.qas:type_name -> proto.QuestionAnswer
	29, // 71: proto.EpisodeUpsertReq.created_at:type_name -> google.protobuf.Timestamp
	29, // 72: proto.EpisodeUpsertReq.updated_at:type_name -> google.protobuf.Timestamp
	30, // 73: proto.EpisodeDeleteMultiReq.id:type_name -> google.protobuf.Any
	30, // 74: proto.EpisodeDeleteMultiReq.name:type_name -> google.protobuf.Any
	30, // 75: proto.EpisodeDeleteMultiReq.content_type:type_name -> google.protobuf.Any
	30, // 76: proto.EpisodeDeleteMultiReq.filter_type:type_name -> google.protobuf.Any
	30, // 77: proto.EpisodeDeleteMultiReq.count:type_name -> google.protobuf.Any
	30, // 78: proto.EpisodeDeleteMultiReq.is_online:type_name -> google.protobuf.Any
	30, // 79: proto.EpisodeDeleteMultiReq.keywords:type_name -> google.protobuf.Any
	30, // 80: proto.EpisodeDeleteMultiReq.outlines:type_name -> google.protobuf.Any
	30, // 81: proto.EpisodeDeleteMultiReq.qas:type_name -> google.protobuf.Any
	30, // 82: proto.EpisodeDeleteMultiReq.created_at:type_name -> google.protobuf.Any
	30, // 83: proto.EpisodeDeleteMultiReq.updated_at:type_name -> google.protobuf.Any
	31, // 84: proto.EpisodeDeleteMultiReq.extra_filters:type_name -> goguru.orm.PropertyFilter
	2,  // 85: proto.EpisodeRepo.Count:input_type -> proto.EpisodeCountReq
	4,  // 86: proto.EpisodeRepo.One:input_type -> proto.EpisodeOneReq
	6,  // 87: proto.EpisodeRepo.List:input_type -> proto.EpisodeListReq
	8,  // 88: proto.EpisodeRepo.Get:input_type -> proto.EpisodeGetReq
	10, // 89: proto.EpisodeRepo.Create:input_type -> proto.EpisodeCreateReq
	12, // 90: proto.EpisodeRepo.Update:input_type -> proto.EpisodeUpdateReq
	14, // 91: proto.EpisodeRepo.Upsert:input_type -> proto.EpisodeUpsertReq
	16, // 92: proto.EpisodeRepo.Delete:input_type -> proto.EpisodeDeleteReq
	18, // 93: proto.EpisodeRepo.DeleteMulti:input_type -> proto.EpisodeDeleteMultiReq
	3,  // 94: proto.EpisodeRepo.Count:output_type -> proto.EpisodeCountRes
	5,  // 95: proto.EpisodeRepo.One:output_type -> proto.EpisodeOneRes
	7,  // 96: proto.EpisodeRepo.List:output_type -> proto.EpisodeListRes
	9,  // 97: proto.EpisodeRepo.Get:output_type -> proto.EpisodeGetRes
	11, // 98: proto.EpisodeRepo.Create:output_type -> proto.EpisodeCreateRes
	13, // 99: proto.EpisodeRepo.Update:output_type -> proto.EpisodeUpdateRes
	15, // 100: proto.EpisodeRepo.Upsert:output_type -> proto.EpisodeUpsertRes
	17, // 101: proto.EpisodeRepo.Delete:output_type -> proto.EpisodeDeleteRes
	19, // 102: proto.EpisodeRepo.DeleteMulti:output_type -> proto.EpisodeDeleteMultiRes
	94, // [94:103] is the sub-list for method output_type
	85, // [85:94] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_app_episode_service_proto_episode_proto_init() }
func file_app_episode_service_proto_episode_proto_init() {
	if File_app_episode_service_proto_episode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_episode_service_proto_episode_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*QuestionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeOneRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeGetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeCreateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeUpdateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeUpsertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeUpsertRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeDeleteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeDeleteMultiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeDeleteMultiRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_episode_service_proto_episode_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeCountReq_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_app_episode_service_proto_episode_proto_msgTypes[0].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[1].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[5].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[9].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[10].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[11].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[12].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[14].OneofWrappers = []any{}
	file_app_episode_service_proto_episode_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_episode_service_proto_episode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_episode_service_proto_episode_proto_goTypes,
		DependencyIndexes: file_app_episode_service_proto_episode_proto_depIdxs,
		MessageInfos:      file_app_episode_service_proto_episode_proto_msgTypes,
	}.Build()
	File_app_episode_service_proto_episode_proto = out.File
	file_app_episode_service_proto_episode_proto_rawDesc = nil
	file_app_episode_service_proto_episode_proto_goTypes = nil
	file_app_episode_service_proto_episode_proto_depIdxs = nil
}
