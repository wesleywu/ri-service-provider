// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/castbox/go-guru/pkg/goguru/conf"
	"github.com/castbox/go-guru/pkg/server"
	"github.com/castbox/go-guru/pkg/util/logger"
	"github.com/castbox/go-guru/pkg/util/mongodb"
	"github.com/castbox/go-guru/pkg/util/otlp"
	"github.com/castbox/go-guru/pkg/util/redis"
	"github.com/go-kratos/kratos/v2"
	"github.com/wesleywu/ri-service-provider/provider/internal/data"
	"github.com/wesleywu/ri-service-provider/provider/internal/service"
)

// Injectors from wire.go:

func wireApp(contextContext context.Context, confServer *conf.Server, confData *conf.Data, log *conf.Log, confOtlp *conf.Otlp) (*kratos.App, func(), error) {
	appMetadata := newAppMetadata()
	logLogger, err := logger.NewLogger(appMetadata, log)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := otlp.NewTracer(contextContext, appMetadata, confOtlp, logLogger)
	if err != nil {
		return nil, nil, err
	}
	cache, err := redis.NewRedisCache(contextContext, confData, logLogger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	grpcServer, err := server.NewGRPCServer(contextContext, confServer, logLogger, tracerProvider, cache)
	if err != nil {
		return nil, nil, err
	}
	client, err := mongodb.NewMongoClient(contextContext, confData, logLogger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(contextContext, confData, logLogger, client, cache)
	if err != nil {
		return nil, nil, err
	}
	services, err := service.NewServices(contextContext, appMetadata, logLogger, dataData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app, err := newApp(contextContext, appMetadata, logLogger, grpcServer, services, tracerProvider)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup()
	}, nil
}
