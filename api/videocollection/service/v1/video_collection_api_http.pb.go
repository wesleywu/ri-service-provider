// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: api/videocollection/service/v1/video_collection_api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	proto "github.com/wesleywu/ri-service-provider/app/videocollection/service/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoCollectionCount = "/v1.VideoCollection/Count"
const OperationVideoCollectionCreate = "/v1.VideoCollection/Create"
const OperationVideoCollectionDelete = "/v1.VideoCollection/Delete"
const OperationVideoCollectionDeleteMulti = "/v1.VideoCollection/DeleteMulti"
const OperationVideoCollectionGet = "/v1.VideoCollection/Get"
const OperationVideoCollectionList = "/v1.VideoCollection/List"
const OperationVideoCollectionOne = "/v1.VideoCollection/One"
const OperationVideoCollectionUpdate = "/v1.VideoCollection/Update"
const OperationVideoCollectionUpsert = "/v1.VideoCollection/Upsert"

type VideoCollectionHTTPServer interface {
	Count(context.Context, *proto.VideoCollectionCountReq) (*proto.VideoCollectionCountRes, error)
	Create(context.Context, *proto.VideoCollectionCreateReq) (*proto.VideoCollectionCreateRes, error)
	Delete(context.Context, *proto.VideoCollectionDeleteReq) (*proto.VideoCollectionDeleteRes, error)
	DeleteMulti(context.Context, *proto.VideoCollectionDeleteMultiReq) (*proto.VideoCollectionDeleteMultiRes, error)
	Get(context.Context, *proto.VideoCollectionGetReq) (*proto.VideoCollectionGetRes, error)
	List(context.Context, *proto.VideoCollectionListReq) (*proto.VideoCollectionListRes, error)
	One(context.Context, *proto.VideoCollectionOneReq) (*proto.VideoCollectionOneRes, error)
	Update(context.Context, *proto.VideoCollectionUpdateReq) (*proto.VideoCollectionUpdateRes, error)
	Upsert(context.Context, *proto.VideoCollectionUpsertReq) (*proto.VideoCollectionUpsertRes, error)
}

func RegisterVideoCollectionHTTPServer(s *http.Server, srv VideoCollectionHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/video-collection/count", _VideoCollection_Count0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/one", _VideoCollection_One0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/list", _VideoCollection_List0_HTTP_Handler(srv))
	r.GET("/v1/video-collection/{id}", _VideoCollection_Get0_HTTP_Handler(srv))
	r.POST("/v1/video-collection", _VideoCollection_Create0_HTTP_Handler(srv))
	r.PATCH("/v1/video-collection/{id}", _VideoCollection_Update0_HTTP_Handler(srv))
	r.PUT("/v1/video-collection/{id}", _VideoCollection_Upsert0_HTTP_Handler(srv))
	r.DELETE("/v1/video-collection/{id}", _VideoCollection_Delete0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/delete", _VideoCollection_DeleteMulti0_HTTP_Handler(srv))
}

func _VideoCollection_Count0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionCountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Count(ctx, req.(*proto.VideoCollectionCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionCountRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_One0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionOneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.One(ctx, req.(*proto.VideoCollectionOneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionOneRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_List0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*proto.VideoCollectionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionListRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Get0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionGetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*proto.VideoCollectionGetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionGetRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Create0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*proto.VideoCollectionCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionCreateRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Update0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*proto.VideoCollectionUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionUpdateRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Upsert0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionUpsertReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionUpsert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upsert(ctx, req.(*proto.VideoCollectionUpsertReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionUpsertRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Delete0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*proto.VideoCollectionDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionDeleteRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_DeleteMulti0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in proto.VideoCollectionDeleteMultiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionDeleteMulti)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMulti(ctx, req.(*proto.VideoCollectionDeleteMultiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*proto.VideoCollectionDeleteMultiRes)
		return ctx.Result(200, reply)
	}
}

type VideoCollectionHTTPClient interface {
	Count(ctx context.Context, req *proto.VideoCollectionCountReq, opts ...http.CallOption) (rsp *proto.VideoCollectionCountRes, err error)
	Create(ctx context.Context, req *proto.VideoCollectionCreateReq, opts ...http.CallOption) (rsp *proto.VideoCollectionCreateRes, err error)
	Delete(ctx context.Context, req *proto.VideoCollectionDeleteReq, opts ...http.CallOption) (rsp *proto.VideoCollectionDeleteRes, err error)
	DeleteMulti(ctx context.Context, req *proto.VideoCollectionDeleteMultiReq, opts ...http.CallOption) (rsp *proto.VideoCollectionDeleteMultiRes, err error)
	Get(ctx context.Context, req *proto.VideoCollectionGetReq, opts ...http.CallOption) (rsp *proto.VideoCollectionGetRes, err error)
	List(ctx context.Context, req *proto.VideoCollectionListReq, opts ...http.CallOption) (rsp *proto.VideoCollectionListRes, err error)
	One(ctx context.Context, req *proto.VideoCollectionOneReq, opts ...http.CallOption) (rsp *proto.VideoCollectionOneRes, err error)
	Update(ctx context.Context, req *proto.VideoCollectionUpdateReq, opts ...http.CallOption) (rsp *proto.VideoCollectionUpdateRes, err error)
	Upsert(ctx context.Context, req *proto.VideoCollectionUpsertReq, opts ...http.CallOption) (rsp *proto.VideoCollectionUpsertRes, err error)
}

type VideoCollectionHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoCollectionHTTPClient(client *http.Client) VideoCollectionHTTPClient {
	return &VideoCollectionHTTPClientImpl{client}
}

func (c *VideoCollectionHTTPClientImpl) Count(ctx context.Context, in *proto.VideoCollectionCountReq, opts ...http.CallOption) (*proto.VideoCollectionCountRes, error) {
	var out proto.VideoCollectionCountRes
	pattern := "/v1/video-collection/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Create(ctx context.Context, in *proto.VideoCollectionCreateReq, opts ...http.CallOption) (*proto.VideoCollectionCreateRes, error) {
	var out proto.VideoCollectionCreateRes
	pattern := "/v1/video-collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Delete(ctx context.Context, in *proto.VideoCollectionDeleteReq, opts ...http.CallOption) (*proto.VideoCollectionDeleteRes, error) {
	var out proto.VideoCollectionDeleteRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoCollectionDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) DeleteMulti(ctx context.Context, in *proto.VideoCollectionDeleteMultiReq, opts ...http.CallOption) (*proto.VideoCollectionDeleteMultiRes, error) {
	var out proto.VideoCollectionDeleteMultiRes
	pattern := "/v1/video-collection/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionDeleteMulti))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Get(ctx context.Context, in *proto.VideoCollectionGetReq, opts ...http.CallOption) (*proto.VideoCollectionGetRes, error) {
	var out proto.VideoCollectionGetRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoCollectionGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) List(ctx context.Context, in *proto.VideoCollectionListReq, opts ...http.CallOption) (*proto.VideoCollectionListRes, error) {
	var out proto.VideoCollectionListRes
	pattern := "/v1/video-collection/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) One(ctx context.Context, in *proto.VideoCollectionOneReq, opts ...http.CallOption) (*proto.VideoCollectionOneRes, error) {
	var out proto.VideoCollectionOneRes
	pattern := "/v1/video-collection/one"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Update(ctx context.Context, in *proto.VideoCollectionUpdateReq, opts ...http.CallOption) (*proto.VideoCollectionUpdateRes, error) {
	var out proto.VideoCollectionUpdateRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Upsert(ctx context.Context, in *proto.VideoCollectionUpsertReq, opts ...http.CallOption) (*proto.VideoCollectionUpsertRes, error) {
	var out proto.VideoCollectionUpsertRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionUpsert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
