// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/castbox/go-guru/pkg/client"
	"github.com/castbox/go-guru/pkg/goguru/conf"
	"github.com/castbox/go-guru/pkg/server"
	"github.com/castbox/go-guru/pkg/util/logger"
	"github.com/castbox/go-guru/pkg/util/otlp"
	"github.com/castbox/go-guru/pkg/util/redis"
	"github.com/go-kratos/kratos/v2"
	client2 "github.com/wesleywu/ri-service-provider/api/internal/client"
	"github.com/wesleywu/ri-service-provider/api/internal/service"
)

// Injectors from wire.go:

func wireApp(contextContext context.Context, confServer *conf.Server, confClient *conf.Client, data *conf.Data, log *conf.Log, confOtlp *conf.Otlp) (*kratos.App, func(), error) {
	appMetadata := newAppMetadata()
	logLogger, err := logger.NewLogger(appMetadata, log)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := otlp.NewTracer(contextContext, appMetadata, confOtlp, logLogger)
	if err != nil {
		return nil, nil, err
	}
	cache, err := redis.NewRedisCache(contextContext, data, logLogger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	httpServer, err := server.NewHTTPServer(contextContext, confServer, logLogger, tracerProvider, cache)
	if err != nil {
		return nil, nil, err
	}
	clientConn, cleanup, err := client.NewGrpcConnection(contextContext, confClient, logLogger)
	if err != nil {
		return nil, nil, err
	}
	clients, err := client2.NewClients(contextContext, clientConn)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	services, err := service.NewServices(contextContext, appMetadata, logLogger, clients)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app, err := newApp(contextContext, appMetadata, logLogger, httpServer, services, tracerProvider)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup()
	}, nil
}
