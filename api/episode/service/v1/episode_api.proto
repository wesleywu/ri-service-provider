syntax = "proto3";

package v1;

option go_package = "github.com/wesleywu/ri-service-provider/api/episode/service/v1;v1";
option java_multiple_files = true;
option java_package = "repo.episode.v1";
option java_outer_classname = "EpisodeV1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "tagger/tagger.proto";
import "goguru/cache/annotations.proto";
import "goguru/orm/condition.proto";
import "goguru/orm/query.proto";
import "goguru/types/objectid.proto";
import "app/episode/service/proto/episode.proto";

service Episode {
  rpc Count (proto.EpisodeCountReq) returns (proto.EpisodeCountRes){
    option (google.api.http) = {
      post: "/v1/episode/count",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
      name: "Episode",
      ttl: "30s",
      key: "",
    };
  }
  rpc One (proto.EpisodeOneReq) returns (proto.EpisodeOneRes){
    option (google.api.http) = {
      post: "/v1/episode/one",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
      name: "Episode",
      ttl: "30s",
      key: "",
    };
  }
  rpc List (proto.EpisodeListReq) returns (proto.EpisodeListRes){
    option (google.api.http) = {
      post: "/v1/episode/list",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
      name: "Episode",
      ttl: "30s",
      key: "",
    };
  }
  rpc Get (proto.EpisodeGetReq) returns (proto.EpisodeGetRes){
    option (google.api.http) = {
      get: "/v1/episode/{id}",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
  rpc Create (proto.EpisodeCreateReq) returns (proto.EpisodeCreateRes){
    option (google.api.http) = {
      post: "/v1/episode",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
  rpc Update (proto.EpisodeUpdateReq) returns (proto.EpisodeUpdateRes){
    option (google.api.http) = {
      patch: "/v1/episode/{id}",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
  rpc Upsert (proto.EpisodeUpsertReq) returns (proto.EpisodeUpsertRes){
    option (google.api.http) = {
      put: "/v1/episode/{id}",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
  rpc Delete (proto.EpisodeDeleteReq) returns (proto.EpisodeDeleteRes){
    option (google.api.http) = {
      delete: "/v1/episode/{id}",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
  rpc DeleteMulti (proto.EpisodeDeleteMultiReq) returns (proto.EpisodeDeleteMultiRes){
    option (google.api.http) = {
      post: "/v1/episode/delete",
      body: "*",
    };
    option (goguru.cache.rule) = {
      cachable: false,
    };
  }
}
