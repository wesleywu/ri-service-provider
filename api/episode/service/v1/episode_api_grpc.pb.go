// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/episode/service/v1/episode_api.proto

package v1

import (
	context "context"
	proto "github.com/wesleywu/ri-service-provider/app/episode/service/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Episode_Count_FullMethodName       = "/v1.Episode/Count"
	Episode_One_FullMethodName         = "/v1.Episode/One"
	Episode_List_FullMethodName        = "/v1.Episode/List"
	Episode_Get_FullMethodName         = "/v1.Episode/Get"
	Episode_Create_FullMethodName      = "/v1.Episode/Create"
	Episode_Update_FullMethodName      = "/v1.Episode/Update"
	Episode_Upsert_FullMethodName      = "/v1.Episode/Upsert"
	Episode_Delete_FullMethodName      = "/v1.Episode/Delete"
	Episode_DeleteMulti_FullMethodName = "/v1.Episode/DeleteMulti"
)

// EpisodeClient is the client API for Episode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpisodeClient interface {
	Count(ctx context.Context, in *proto.EpisodeCountReq, opts ...grpc.CallOption) (*proto.EpisodeCountRes, error)
	One(ctx context.Context, in *proto.EpisodeOneReq, opts ...grpc.CallOption) (*proto.EpisodeOneRes, error)
	List(ctx context.Context, in *proto.EpisodeListReq, opts ...grpc.CallOption) (*proto.EpisodeListRes, error)
	Get(ctx context.Context, in *proto.EpisodeGetReq, opts ...grpc.CallOption) (*proto.EpisodeGetRes, error)
	Create(ctx context.Context, in *proto.EpisodeCreateReq, opts ...grpc.CallOption) (*proto.EpisodeCreateRes, error)
	Update(ctx context.Context, in *proto.EpisodeUpdateReq, opts ...grpc.CallOption) (*proto.EpisodeUpdateRes, error)
	Upsert(ctx context.Context, in *proto.EpisodeUpsertReq, opts ...grpc.CallOption) (*proto.EpisodeUpsertRes, error)
	Delete(ctx context.Context, in *proto.EpisodeDeleteReq, opts ...grpc.CallOption) (*proto.EpisodeDeleteRes, error)
	DeleteMulti(ctx context.Context, in *proto.EpisodeDeleteMultiReq, opts ...grpc.CallOption) (*proto.EpisodeDeleteMultiRes, error)
}

type episodeClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeClient(cc grpc.ClientConnInterface) EpisodeClient {
	return &episodeClient{cc}
}

func (c *episodeClient) Count(ctx context.Context, in *proto.EpisodeCountReq, opts ...grpc.CallOption) (*proto.EpisodeCountRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeCountRes)
	err := c.cc.Invoke(ctx, Episode_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) One(ctx context.Context, in *proto.EpisodeOneReq, opts ...grpc.CallOption) (*proto.EpisodeOneRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeOneRes)
	err := c.cc.Invoke(ctx, Episode_One_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) List(ctx context.Context, in *proto.EpisodeListReq, opts ...grpc.CallOption) (*proto.EpisodeListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeListRes)
	err := c.cc.Invoke(ctx, Episode_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) Get(ctx context.Context, in *proto.EpisodeGetReq, opts ...grpc.CallOption) (*proto.EpisodeGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeGetRes)
	err := c.cc.Invoke(ctx, Episode_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) Create(ctx context.Context, in *proto.EpisodeCreateReq, opts ...grpc.CallOption) (*proto.EpisodeCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeCreateRes)
	err := c.cc.Invoke(ctx, Episode_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) Update(ctx context.Context, in *proto.EpisodeUpdateReq, opts ...grpc.CallOption) (*proto.EpisodeUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeUpdateRes)
	err := c.cc.Invoke(ctx, Episode_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) Upsert(ctx context.Context, in *proto.EpisodeUpsertReq, opts ...grpc.CallOption) (*proto.EpisodeUpsertRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeUpsertRes)
	err := c.cc.Invoke(ctx, Episode_Upsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) Delete(ctx context.Context, in *proto.EpisodeDeleteReq, opts ...grpc.CallOption) (*proto.EpisodeDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeDeleteRes)
	err := c.cc.Invoke(ctx, Episode_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeClient) DeleteMulti(ctx context.Context, in *proto.EpisodeDeleteMultiReq, opts ...grpc.CallOption) (*proto.EpisodeDeleteMultiRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.EpisodeDeleteMultiRes)
	err := c.cc.Invoke(ctx, Episode_DeleteMulti_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeServer is the server API for Episode service.
// All implementations must embed UnimplementedEpisodeServer
// for forward compatibility
type EpisodeServer interface {
	Count(context.Context, *proto.EpisodeCountReq) (*proto.EpisodeCountRes, error)
	One(context.Context, *proto.EpisodeOneReq) (*proto.EpisodeOneRes, error)
	List(context.Context, *proto.EpisodeListReq) (*proto.EpisodeListRes, error)
	Get(context.Context, *proto.EpisodeGetReq) (*proto.EpisodeGetRes, error)
	Create(context.Context, *proto.EpisodeCreateReq) (*proto.EpisodeCreateRes, error)
	Update(context.Context, *proto.EpisodeUpdateReq) (*proto.EpisodeUpdateRes, error)
	Upsert(context.Context, *proto.EpisodeUpsertReq) (*proto.EpisodeUpsertRes, error)
	Delete(context.Context, *proto.EpisodeDeleteReq) (*proto.EpisodeDeleteRes, error)
	DeleteMulti(context.Context, *proto.EpisodeDeleteMultiReq) (*proto.EpisodeDeleteMultiRes, error)
	mustEmbedUnimplementedEpisodeServer()
}

// UnimplementedEpisodeServer must be embedded to have forward compatible implementations.
type UnimplementedEpisodeServer struct {
}

func (UnimplementedEpisodeServer) Count(context.Context, *proto.EpisodeCountReq) (*proto.EpisodeCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedEpisodeServer) One(context.Context, *proto.EpisodeOneReq) (*proto.EpisodeOneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method One not implemented")
}
func (UnimplementedEpisodeServer) List(context.Context, *proto.EpisodeListReq) (*proto.EpisodeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEpisodeServer) Get(context.Context, *proto.EpisodeGetReq) (*proto.EpisodeGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEpisodeServer) Create(context.Context, *proto.EpisodeCreateReq) (*proto.EpisodeCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEpisodeServer) Update(context.Context, *proto.EpisodeUpdateReq) (*proto.EpisodeUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEpisodeServer) Upsert(context.Context, *proto.EpisodeUpsertReq) (*proto.EpisodeUpsertRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedEpisodeServer) Delete(context.Context, *proto.EpisodeDeleteReq) (*proto.EpisodeDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEpisodeServer) DeleteMulti(context.Context, *proto.EpisodeDeleteMultiReq) (*proto.EpisodeDeleteMultiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMulti not implemented")
}
func (UnimplementedEpisodeServer) mustEmbedUnimplementedEpisodeServer() {}

// UnsafeEpisodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodeServer will
// result in compilation errors.
type UnsafeEpisodeServer interface {
	mustEmbedUnimplementedEpisodeServer()
}

func RegisterEpisodeServer(s grpc.ServiceRegistrar, srv EpisodeServer) {
	s.RegisterService(&Episode_ServiceDesc, srv)
}

func _Episode_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Count(ctx, req.(*proto.EpisodeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_One_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).One(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_One_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).One(ctx, req.(*proto.EpisodeOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).List(ctx, req.(*proto.EpisodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Get(ctx, req.(*proto.EpisodeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Create(ctx, req.(*proto.EpisodeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Update(ctx, req.(*proto.EpisodeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeUpsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Upsert(ctx, req.(*proto.EpisodeUpsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).Delete(ctx, req.(*proto.EpisodeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Episode_DeleteMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.EpisodeDeleteMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServer).DeleteMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Episode_DeleteMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServer).DeleteMulti(ctx, req.(*proto.EpisodeDeleteMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Episode_ServiceDesc is the grpc.ServiceDesc for Episode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Episode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Episode",
	HandlerType: (*EpisodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Episode_Count_Handler,
		},
		{
			MethodName: "One",
			Handler:    _Episode_One_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Episode_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Episode_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Episode_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Episode_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Episode_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Episode_Delete_Handler,
		},
		{
			MethodName: "DeleteMulti",
			Handler:    _Episode_DeleteMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/episode/service/v1/episode_api.proto",
}
