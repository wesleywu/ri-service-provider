{
  "swagger": "2.0",
  "info": {
    "title": "api/episode/service/v1/episode_api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Episode"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/episode": {
      "post": {
        "operationId": "Episode_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeCreateRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoEpisodeCreateReq"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    },
    "/v1/episode/count": {
      "post": {
        "operationId": "Episode_Count",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeCountRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoEpisodeCountReq"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    },
    "/v1/episode/delete": {
      "post": {
        "operationId": "Episode_DeleteMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeDeleteMultiRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoEpisodeDeleteMultiReq"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    },
    "/v1/episode/list": {
      "post": {
        "operationId": "Episode_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeListRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoEpisodeListReq"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    },
    "/v1/episode/one": {
      "post": {
        "operationId": "Episode_One",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeOneRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoEpisodeOneReq"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    },
    "/v1/episode/{id}": {
      "get": {
        "operationId": "Episode_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeGetRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Episode"
        ]
      },
      "delete": {
        "operationId": "Episode_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeDeleteRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Episode"
        ]
      },
      "put": {
        "operationId": "Episode_Upsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeUpsertRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EpisodeUpsertBody"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      },
      "patch": {
        "operationId": "Episode_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoEpisodeUpdateRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EpisodeUpdateBody"
            }
          }
        ],
        "tags": [
          "Episode"
        ]
      }
    }
  },
  "definitions": {
    "EpisodeUpdateBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/protoContentType"
        },
        "filterType": {
          "$ref": "#/definitions/protoFilterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "isOnline": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outlines": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "qas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoQuestionAnswer"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EpisodeUpsertBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/protoContentType"
        },
        "filterType": {
          "$ref": "#/definitions/protoFilterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "isOnline": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outlines": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "qas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoQuestionAnswer"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ormCondition": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ormOperatorType"
        },
        "multi": {
          "$ref": "#/definitions/ormMultiType"
        },
        "wildcard": {
          "$ref": "#/definitions/ormWildcardType"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "ormMultiType": {
      "type": "string",
      "enum": [
        "NoMulti",
        "Between",
        "NotBetween",
        "In",
        "NotIn"
      ],
      "default": "NoMulti"
    },
    "ormOperatorType": {
      "type": "string",
      "enum": [
        "EQ",
        "NE",
        "GT",
        "GTE",
        "LT",
        "LTE",
        "Like",
        "NotLike",
        "Null",
        "NotNull"
      ],
      "default": "EQ"
    },
    "ormPageInfo": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64",
          "title": "page number of current page, starting from 1"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "page size of the paging request, may be larger than NumberOfElements"
        },
        "offset": {
          "type": "string",
          "format": "int64",
          "title": "the offset of the first element in current page of the paging request"
        },
        "numberOfElements": {
          "type": "string",
          "format": "int64",
          "title": "number of elements in current page"
        },
        "totalElements": {
          "type": "string",
          "format": "int64",
          "title": "total number of elements for current request when without paging"
        },
        "totalPages": {
          "type": "string",
          "format": "int64",
          "title": "total number of pages of the paging request"
        },
        "first": {
          "type": "boolean",
          "title": "whether current page is first page"
        },
        "last": {
          "type": "boolean",
          "title": "whether current page is last page"
        },
        "sorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormSortParam"
          },
          "title": "the sorting parameters of the paging request"
        }
      },
      "title": "返回的分页信息"
    },
    "ormPageRequest": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64",
          "title": "请求的页码，从1开始"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "请求的每页记录数"
        },
        "sorts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormSortParam"
          },
          "title": "请求使用的排序参数列表，排在前面的排序参数优先级更高"
        }
      },
      "title": "分页和排序的请求"
    },
    "ormPropertyFilter": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/ormCondition"
        }
      }
    },
    "ormSortDirection": {
      "type": "string",
      "enum": [
        "Asc",
        "Desc"
      ],
      "default": "Asc",
      "title": "排序方向"
    },
    "ormSortParam": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "title": "要排序的字段/属性名，暂不支持嵌套"
        },
        "direction": {
          "$ref": "#/definitions/ormSortDirection",
          "title": "排序方向"
        }
      },
      "title": "排序参数"
    },
    "ormWildcardType": {
      "type": "string",
      "enum": [
        "NoWildcard",
        "Contains",
        "StartsWith",
        "EndsWith"
      ],
      "default": "NoWildcard"
    },
    "protoContentType": {
      "type": "string",
      "enum": [
        "NEWS",
        "COMEDY",
        "SPORTS"
      ],
      "default": "NEWS",
      "title": "- NEWS: 新闻\n - COMEDY: 喜剧\n - SPORTS: 体育"
    },
    "protoEpisode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/protoContentType"
        },
        "filterType": {
          "$ref": "#/definitions/protoFilterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "isOnline": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outlines": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "qas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoQuestionAnswer"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protoEpisodeCountReq": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/protobufAny"
        },
        "name": {
          "$ref": "#/definitions/protobufAny"
        },
        "contentType": {
          "$ref": "#/definitions/protobufAny"
        },
        "filterType": {
          "$ref": "#/definitions/protobufAny"
        },
        "count": {
          "$ref": "#/definitions/protobufAny"
        },
        "isOnline": {
          "$ref": "#/definitions/protobufAny"
        },
        "keywords": {
          "$ref": "#/definitions/protobufAny"
        },
        "outlines": {
          "$ref": "#/definitions/protobufAny"
        },
        "qas": {
          "$ref": "#/definitions/protobufAny"
        },
        "createdAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "updatedAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "extraFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormPropertyFilter"
          }
        }
      }
    },
    "protoEpisodeCountRes": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "protoEpisodeCreateReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/protoContentType"
        },
        "filterType": {
          "$ref": "#/definitions/protoFilterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "isOnline": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outlines": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "qas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoQuestionAnswer"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protoEpisodeCreateRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "insertedId": {
          "type": "string"
        },
        "insertedCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "protoEpisodeDeleteMultiReq": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/protobufAny"
        },
        "name": {
          "$ref": "#/definitions/protobufAny"
        },
        "contentType": {
          "$ref": "#/definitions/protobufAny"
        },
        "filterType": {
          "$ref": "#/definitions/protobufAny"
        },
        "count": {
          "$ref": "#/definitions/protobufAny"
        },
        "isOnline": {
          "$ref": "#/definitions/protobufAny"
        },
        "keywords": {
          "$ref": "#/definitions/protobufAny"
        },
        "outlines": {
          "$ref": "#/definitions/protobufAny"
        },
        "qas": {
          "$ref": "#/definitions/protobufAny"
        },
        "createdAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "updatedAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "extraFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormPropertyFilter"
          }
        }
      }
    },
    "protoEpisodeDeleteMultiRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "deletedCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "protoEpisodeDeleteRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "deletedCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "protoEpisodeGetRes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/protoContentType"
        },
        "filterType": {
          "$ref": "#/definitions/protoFilterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "isOnline": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outlines": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "qas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoQuestionAnswer"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protoEpisodeListReq": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/protobufAny"
        },
        "name": {
          "$ref": "#/definitions/protobufAny"
        },
        "contentType": {
          "$ref": "#/definitions/protobufAny"
        },
        "filterType": {
          "$ref": "#/definitions/protobufAny"
        },
        "count": {
          "$ref": "#/definitions/protobufAny"
        },
        "isOnline": {
          "$ref": "#/definitions/protobufAny"
        },
        "keywords": {
          "$ref": "#/definitions/protobufAny"
        },
        "outlines": {
          "$ref": "#/definitions/protobufAny"
        },
        "qas": {
          "$ref": "#/definitions/protobufAny"
        },
        "createdAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "updatedAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "extraFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormPropertyFilter"
          }
        },
        "pageRequest": {
          "$ref": "#/definitions/ormPageRequest"
        },
        "fieldsIncluded": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protoEpisodeListRes": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/ormPageInfo"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoEpisode"
          }
        }
      }
    },
    "protoEpisodeOneReq": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/protobufAny"
        },
        "name": {
          "$ref": "#/definitions/protobufAny"
        },
        "contentType": {
          "$ref": "#/definitions/protobufAny"
        },
        "filterType": {
          "$ref": "#/definitions/protobufAny"
        },
        "count": {
          "$ref": "#/definitions/protobufAny"
        },
        "isOnline": {
          "$ref": "#/definitions/protobufAny"
        },
        "keywords": {
          "$ref": "#/definitions/protobufAny"
        },
        "outlines": {
          "$ref": "#/definitions/protobufAny"
        },
        "qas": {
          "$ref": "#/definitions/protobufAny"
        },
        "createdAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "updatedAt": {
          "$ref": "#/definitions/protobufAny"
        },
        "extraFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ormPropertyFilter"
          }
        },
        "pageRequest": {
          "$ref": "#/definitions/ormPageRequest"
        },
        "fieldsIncluded": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protoEpisodeOneRes": {
      "type": "object",
      "properties": {
        "found": {
          "type": "boolean"
        },
        "item": {
          "$ref": "#/definitions/protoEpisode"
        }
      }
    },
    "protoEpisodeUpdateRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "matchedCount": {
          "type": "string",
          "format": "int64",
          "title": "The number of documents matched by the upsert operation"
        },
        "modifiedCount": {
          "type": "string",
          "format": "int64",
          "description": "The number of documents modified by the operation."
        }
      }
    },
    "protoEpisodeUpsertRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "upsertedId": {
          "type": "string"
        },
        "matchedCount": {
          "type": "string",
          "format": "int64",
          "title": "The number of documents matched by the upsert operation"
        },
        "modifiedCount": {
          "type": "string",
          "format": "int64",
          "description": "The number of documents modified by the operation."
        },
        "upsertedCount": {
          "type": "string",
          "format": "int64",
          "description": "The number of documents upserted by the operation."
        }
      }
    },
    "protoFilterType": {
      "type": "string",
      "enum": [
        "RULED",
        "MANUAL"
      ],
      "default": "RULED",
      "title": "- RULED: 规则筛选\n - MANUAL: 人工"
    },
    "protoQuestionAnswer": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string"
        },
        "endTime": {
          "type": "string"
        },
        "question": {
          "type": "string"
        },
        "answer": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
