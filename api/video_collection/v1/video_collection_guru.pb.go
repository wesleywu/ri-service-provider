// Code generated by protoc-gen-go-guru. DO NOT EDIT.
// versions:
// - protoc-gen-go-guru v0.1.3
// - protoc             (unknown)
// source: proto/video_collection/video_collection.proto

package video_collection

import (
	"github.com/castbox/go-guru/pkg/guru/service/annotations"
	"github.com/castbox/go-guru/pkg/server"
)

func RegisterVideoCollectionGuruServer(srv VideoCollectionServer) error {
	var err error
	server.RegisterServiceDesc(&VideoCollection_ServiceDesc, srv)
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Count", &annotations.CacheRule{
		Cachable: false,
		Name:     "VideoCollection",
		Ttl:      "30s",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "One", &annotations.CacheRule{
		Cachable: false,
		Name:     "VideoCollection",
		Ttl:      "30s",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "List", &annotations.CacheRule{
		Cachable: false,
		Name:     "VideoCollection",
		Ttl:      "30s",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Get", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Create", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Update", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Upsert", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "Delete", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	err = server.RegisterMethodDesc("video_collection.VideoCollection", "DeleteMulti", &annotations.CacheRule{
		Cachable: false,
		Name:     "",
		Ttl:      "",
		Key:      "",
	})
	if err != nil {
		return err
	}
	return nil
}
