// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/video_collection/video_collection.proto

package video_collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoCollection_Count_FullMethodName       = "/video_collection.VideoCollection/Count"
	VideoCollection_One_FullMethodName         = "/video_collection.VideoCollection/One"
	VideoCollection_List_FullMethodName        = "/video_collection.VideoCollection/List"
	VideoCollection_Get_FullMethodName         = "/video_collection.VideoCollection/Get"
	VideoCollection_Create_FullMethodName      = "/video_collection.VideoCollection/Create"
	VideoCollection_Update_FullMethodName      = "/video_collection.VideoCollection/Update"
	VideoCollection_Upsert_FullMethodName      = "/video_collection.VideoCollection/Upsert"
	VideoCollection_Delete_FullMethodName      = "/video_collection.VideoCollection/Delete"
	VideoCollection_DeleteMulti_FullMethodName = "/video_collection.VideoCollection/DeleteMulti"
)

// VideoCollectionClient is the client API for VideoCollection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoCollectionClient interface {
	Count(ctx context.Context, in *VideoCollectionCountReq, opts ...grpc.CallOption) (*VideoCollectionCountRes, error)
	One(ctx context.Context, in *VideoCollectionOneReq, opts ...grpc.CallOption) (*VideoCollectionOneRes, error)
	List(ctx context.Context, in *VideoCollectionListReq, opts ...grpc.CallOption) (*VideoCollectionListRes, error)
	Get(ctx context.Context, in *VideoCollectionGetReq, opts ...grpc.CallOption) (*VideoCollectionGetRes, error)
	Create(ctx context.Context, in *VideoCollectionCreateReq, opts ...grpc.CallOption) (*VideoCollectionCreateRes, error)
	Update(ctx context.Context, in *VideoCollectionUpdateReq, opts ...grpc.CallOption) (*VideoCollectionUpdateRes, error)
	Upsert(ctx context.Context, in *VideoCollectionUpsertReq, opts ...grpc.CallOption) (*VideoCollectionUpsertRes, error)
	Delete(ctx context.Context, in *VideoCollectionDeleteReq, opts ...grpc.CallOption) (*VideoCollectionDeleteRes, error)
	DeleteMulti(ctx context.Context, in *VideoCollectionDeleteMultiReq, opts ...grpc.CallOption) (*VideoCollectionDeleteMultiRes, error)
}

type videoCollectionClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoCollectionClient(cc grpc.ClientConnInterface) VideoCollectionClient {
	return &videoCollectionClient{cc}
}

func (c *videoCollectionClient) Count(ctx context.Context, in *VideoCollectionCountReq, opts ...grpc.CallOption) (*VideoCollectionCountRes, error) {
	out := new(VideoCollectionCountRes)
	err := c.cc.Invoke(ctx, VideoCollection_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) One(ctx context.Context, in *VideoCollectionOneReq, opts ...grpc.CallOption) (*VideoCollectionOneRes, error) {
	out := new(VideoCollectionOneRes)
	err := c.cc.Invoke(ctx, VideoCollection_One_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) List(ctx context.Context, in *VideoCollectionListReq, opts ...grpc.CallOption) (*VideoCollectionListRes, error) {
	out := new(VideoCollectionListRes)
	err := c.cc.Invoke(ctx, VideoCollection_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) Get(ctx context.Context, in *VideoCollectionGetReq, opts ...grpc.CallOption) (*VideoCollectionGetRes, error) {
	out := new(VideoCollectionGetRes)
	err := c.cc.Invoke(ctx, VideoCollection_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) Create(ctx context.Context, in *VideoCollectionCreateReq, opts ...grpc.CallOption) (*VideoCollectionCreateRes, error) {
	out := new(VideoCollectionCreateRes)
	err := c.cc.Invoke(ctx, VideoCollection_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) Update(ctx context.Context, in *VideoCollectionUpdateReq, opts ...grpc.CallOption) (*VideoCollectionUpdateRes, error) {
	out := new(VideoCollectionUpdateRes)
	err := c.cc.Invoke(ctx, VideoCollection_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) Upsert(ctx context.Context, in *VideoCollectionUpsertReq, opts ...grpc.CallOption) (*VideoCollectionUpsertRes, error) {
	out := new(VideoCollectionUpsertRes)
	err := c.cc.Invoke(ctx, VideoCollection_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) Delete(ctx context.Context, in *VideoCollectionDeleteReq, opts ...grpc.CallOption) (*VideoCollectionDeleteRes, error) {
	out := new(VideoCollectionDeleteRes)
	err := c.cc.Invoke(ctx, VideoCollection_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCollectionClient) DeleteMulti(ctx context.Context, in *VideoCollectionDeleteMultiReq, opts ...grpc.CallOption) (*VideoCollectionDeleteMultiRes, error) {
	out := new(VideoCollectionDeleteMultiRes)
	err := c.cc.Invoke(ctx, VideoCollection_DeleteMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoCollectionServer is the server API for VideoCollection service.
// All implementations must embed UnimplementedVideoCollectionServer
// for forward compatibility
type VideoCollectionServer interface {
	Count(context.Context, *VideoCollectionCountReq) (*VideoCollectionCountRes, error)
	One(context.Context, *VideoCollectionOneReq) (*VideoCollectionOneRes, error)
	List(context.Context, *VideoCollectionListReq) (*VideoCollectionListRes, error)
	Get(context.Context, *VideoCollectionGetReq) (*VideoCollectionGetRes, error)
	Create(context.Context, *VideoCollectionCreateReq) (*VideoCollectionCreateRes, error)
	Update(context.Context, *VideoCollectionUpdateReq) (*VideoCollectionUpdateRes, error)
	Upsert(context.Context, *VideoCollectionUpsertReq) (*VideoCollectionUpsertRes, error)
	Delete(context.Context, *VideoCollectionDeleteReq) (*VideoCollectionDeleteRes, error)
	DeleteMulti(context.Context, *VideoCollectionDeleteMultiReq) (*VideoCollectionDeleteMultiRes, error)
	mustEmbedUnimplementedVideoCollectionServer()
}

// UnimplementedVideoCollectionServer must be embedded to have forward compatible implementations.
type UnimplementedVideoCollectionServer struct {
}

func (UnimplementedVideoCollectionServer) Count(context.Context, *VideoCollectionCountReq) (*VideoCollectionCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedVideoCollectionServer) One(context.Context, *VideoCollectionOneReq) (*VideoCollectionOneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method One not implemented")
}
func (UnimplementedVideoCollectionServer) List(context.Context, *VideoCollectionListReq) (*VideoCollectionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVideoCollectionServer) Get(context.Context, *VideoCollectionGetReq) (*VideoCollectionGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVideoCollectionServer) Create(context.Context, *VideoCollectionCreateReq) (*VideoCollectionCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVideoCollectionServer) Update(context.Context, *VideoCollectionUpdateReq) (*VideoCollectionUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVideoCollectionServer) Upsert(context.Context, *VideoCollectionUpsertReq) (*VideoCollectionUpsertRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedVideoCollectionServer) Delete(context.Context, *VideoCollectionDeleteReq) (*VideoCollectionDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVideoCollectionServer) DeleteMulti(context.Context, *VideoCollectionDeleteMultiReq) (*VideoCollectionDeleteMultiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMulti not implemented")
}
func (UnimplementedVideoCollectionServer) mustEmbedUnimplementedVideoCollectionServer() {}

// UnsafeVideoCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoCollectionServer will
// result in compilation errors.
type UnsafeVideoCollectionServer interface {
	mustEmbedUnimplementedVideoCollectionServer()
}

func RegisterVideoCollectionServer(s grpc.ServiceRegistrar, srv VideoCollectionServer) {
	s.RegisterService(&VideoCollection_ServiceDesc, srv)
}

func _VideoCollection_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Count(ctx, req.(*VideoCollectionCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_One_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).One(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_One_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).One(ctx, req.(*VideoCollectionOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).List(ctx, req.(*VideoCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Get(ctx, req.(*VideoCollectionGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Create(ctx, req.(*VideoCollectionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Update(ctx, req.(*VideoCollectionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionUpsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Upsert(ctx, req.(*VideoCollectionUpsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).Delete(ctx, req.(*VideoCollectionDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCollection_DeleteMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCollectionDeleteMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCollectionServer).DeleteMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoCollection_DeleteMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCollectionServer).DeleteMulti(ctx, req.(*VideoCollectionDeleteMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoCollection_ServiceDesc is the grpc.ServiceDesc for VideoCollection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoCollection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video_collection.VideoCollection",
	HandlerType: (*VideoCollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _VideoCollection_Count_Handler,
		},
		{
			MethodName: "One",
			Handler:    _VideoCollection_One_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VideoCollection_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VideoCollection_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VideoCollection_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VideoCollection_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _VideoCollection_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VideoCollection_Delete_Handler,
		},
		{
			MethodName: "DeleteMulti",
			Handler:    _VideoCollection_DeleteMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video_collection/video_collection.proto",
}
