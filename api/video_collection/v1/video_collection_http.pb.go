// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: proto/video_collection/video_collection.proto

package video_collection

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoCollectionCount = "/video_collection.VideoCollection/Count"
const OperationVideoCollectionCreate = "/video_collection.VideoCollection/Create"
const OperationVideoCollectionDelete = "/video_collection.VideoCollection/Delete"
const OperationVideoCollectionDeleteMulti = "/video_collection.VideoCollection/DeleteMulti"
const OperationVideoCollectionGet = "/video_collection.VideoCollection/Get"
const OperationVideoCollectionList = "/video_collection.VideoCollection/List"
const OperationVideoCollectionOne = "/video_collection.VideoCollection/One"
const OperationVideoCollectionUpdate = "/video_collection.VideoCollection/Update"
const OperationVideoCollectionUpsert = "/video_collection.VideoCollection/Upsert"

type VideoCollectionHTTPServer interface {
	Count(context.Context, *VideoCollectionCountReq) (*VideoCollectionCountRes, error)
	Create(context.Context, *VideoCollectionCreateReq) (*VideoCollectionCreateRes, error)
	Delete(context.Context, *VideoCollectionDeleteReq) (*VideoCollectionDeleteRes, error)
	DeleteMulti(context.Context, *VideoCollectionDeleteMultiReq) (*VideoCollectionDeleteMultiRes, error)
	Get(context.Context, *VideoCollectionGetReq) (*VideoCollectionGetRes, error)
	List(context.Context, *VideoCollectionListReq) (*VideoCollectionListRes, error)
	One(context.Context, *VideoCollectionOneReq) (*VideoCollectionOneRes, error)
	Update(context.Context, *VideoCollectionUpdateReq) (*VideoCollectionUpdateRes, error)
	Upsert(context.Context, *VideoCollectionUpsertReq) (*VideoCollectionUpsertRes, error)
}

func RegisterVideoCollectionHTTPServer(s *http.Server, srv VideoCollectionHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/video-collection/count", _VideoCollection_Count0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/one", _VideoCollection_One0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/list", _VideoCollection_List0_HTTP_Handler(srv))
	r.GET("/v1/video-collection/{id}", _VideoCollection_Get0_HTTP_Handler(srv))
	r.POST("/v1/video-collection", _VideoCollection_Create0_HTTP_Handler(srv))
	r.PATCH("/v1/video-collection/{id}", _VideoCollection_Update0_HTTP_Handler(srv))
	r.PUT("/v1/video-collection/{id}", _VideoCollection_Upsert0_HTTP_Handler(srv))
	r.DELETE("/v1/video-collection/{id}", _VideoCollection_Delete0_HTTP_Handler(srv))
	r.POST("/v1/video-collection/delete", _VideoCollection_DeleteMulti0_HTTP_Handler(srv))
}

func _VideoCollection_Count0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionCountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Count(ctx, req.(*VideoCollectionCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionCountRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_One0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionOneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.One(ctx, req.(*VideoCollectionOneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionOneRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_List0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*VideoCollectionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionListRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Get0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionGetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*VideoCollectionGetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionGetRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Create0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*VideoCollectionCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionCreateRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Update0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*VideoCollectionUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionUpdateRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Upsert0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionUpsertReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionUpsert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upsert(ctx, req.(*VideoCollectionUpsertReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionUpsertRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_Delete0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*VideoCollectionDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionDeleteRes)
		return ctx.Result(200, reply)
	}
}

func _VideoCollection_DeleteMulti0_HTTP_Handler(srv VideoCollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoCollectionDeleteMultiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCollectionDeleteMulti)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMulti(ctx, req.(*VideoCollectionDeleteMultiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoCollectionDeleteMultiRes)
		return ctx.Result(200, reply)
	}
}

type VideoCollectionHTTPClient interface {
	Count(ctx context.Context, req *VideoCollectionCountReq, opts ...http.CallOption) (rsp *VideoCollectionCountRes, err error)
	Create(ctx context.Context, req *VideoCollectionCreateReq, opts ...http.CallOption) (rsp *VideoCollectionCreateRes, err error)
	Delete(ctx context.Context, req *VideoCollectionDeleteReq, opts ...http.CallOption) (rsp *VideoCollectionDeleteRes, err error)
	DeleteMulti(ctx context.Context, req *VideoCollectionDeleteMultiReq, opts ...http.CallOption) (rsp *VideoCollectionDeleteMultiRes, err error)
	Get(ctx context.Context, req *VideoCollectionGetReq, opts ...http.CallOption) (rsp *VideoCollectionGetRes, err error)
	List(ctx context.Context, req *VideoCollectionListReq, opts ...http.CallOption) (rsp *VideoCollectionListRes, err error)
	One(ctx context.Context, req *VideoCollectionOneReq, opts ...http.CallOption) (rsp *VideoCollectionOneRes, err error)
	Update(ctx context.Context, req *VideoCollectionUpdateReq, opts ...http.CallOption) (rsp *VideoCollectionUpdateRes, err error)
	Upsert(ctx context.Context, req *VideoCollectionUpsertReq, opts ...http.CallOption) (rsp *VideoCollectionUpsertRes, err error)
}

type VideoCollectionHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoCollectionHTTPClient(client *http.Client) VideoCollectionHTTPClient {
	return &VideoCollectionHTTPClientImpl{client}
}

func (c *VideoCollectionHTTPClientImpl) Count(ctx context.Context, in *VideoCollectionCountReq, opts ...http.CallOption) (*VideoCollectionCountRes, error) {
	var out VideoCollectionCountRes
	pattern := "/v1/video-collection/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Create(ctx context.Context, in *VideoCollectionCreateReq, opts ...http.CallOption) (*VideoCollectionCreateRes, error) {
	var out VideoCollectionCreateRes
	pattern := "/v1/video-collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Delete(ctx context.Context, in *VideoCollectionDeleteReq, opts ...http.CallOption) (*VideoCollectionDeleteRes, error) {
	var out VideoCollectionDeleteRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) DeleteMulti(ctx context.Context, in *VideoCollectionDeleteMultiReq, opts ...http.CallOption) (*VideoCollectionDeleteMultiRes, error) {
	var out VideoCollectionDeleteMultiRes
	pattern := "/v1/video-collection/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionDeleteMulti))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Get(ctx context.Context, in *VideoCollectionGetReq, opts ...http.CallOption) (*VideoCollectionGetRes, error) {
	var out VideoCollectionGetRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) List(ctx context.Context, in *VideoCollectionListReq, opts ...http.CallOption) (*VideoCollectionListRes, error) {
	var out VideoCollectionListRes
	pattern := "/v1/video-collection/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) One(ctx context.Context, in *VideoCollectionOneReq, opts ...http.CallOption) (*VideoCollectionOneRes, error) {
	var out VideoCollectionOneRes
	pattern := "/v1/video-collection/one"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Update(ctx context.Context, in *VideoCollectionUpdateReq, opts ...http.CallOption) (*VideoCollectionUpdateRes, error) {
	var out VideoCollectionUpdateRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCollectionHTTPClientImpl) Upsert(ctx context.Context, in *VideoCollectionUpsertReq, opts ...http.CallOption) (*VideoCollectionUpsertRes, error) {
	var out VideoCollectionUpsertRes
	pattern := "/v1/video-collection/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCollectionUpsert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
